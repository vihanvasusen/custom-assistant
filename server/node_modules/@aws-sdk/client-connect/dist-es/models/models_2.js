import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { ConnectServiceException as __BaseException } from "./ConnectServiceException";
export const QueueType = {
    AGENT: "AGENT",
    STANDARD: "STANDARD",
};
export const RealTimeContactAnalysisOutputType = {
    Raw: "Raw",
    Redacted: "Redacted",
};
export const RealTimeContactAnalysisSegmentType = {
    Attachments: "Attachments",
    Categories: "Categories",
    Event: "Event",
    Issues: "Issues",
    PostContactSummary: "PostContactSummary",
    Transcript: "Transcript",
};
export const RealTimeContactAnalysisSupportedChannel = {
    CHAT: "CHAT",
    VOICE: "VOICE",
};
export const ArtifactStatus = {
    APPROVED: "APPROVED",
    IN_PROGRESS: "IN_PROGRESS",
    REJECTED: "REJECTED",
};
export var RealTimeContactAnalysisTimeData;
(function (RealTimeContactAnalysisTimeData) {
    RealTimeContactAnalysisTimeData.visit = (value, visitor) => {
        if (value.AbsoluteTime !== undefined)
            return visitor.AbsoluteTime(value.AbsoluteTime);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RealTimeContactAnalysisTimeData || (RealTimeContactAnalysisTimeData = {}));
export const RealTimeContactAnalysisPostContactSummaryFailureCode = {
    FAILED_SAFETY_GUIDELINES: "FAILED_SAFETY_GUIDELINES",
    INSUFFICIENT_CONVERSATION_CONTENT: "INSUFFICIENT_CONVERSATION_CONTENT",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_ANALYSIS_CONFIGURATION: "INVALID_ANALYSIS_CONFIGURATION",
    QUOTA_EXCEEDED: "QUOTA_EXCEEDED",
};
export const RealTimeContactAnalysisPostContactSummaryStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
};
export const RealTimeContactAnalysisSentimentLabel = {
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
export var RealtimeContactAnalysisSegment;
(function (RealtimeContactAnalysisSegment) {
    RealtimeContactAnalysisSegment.visit = (value, visitor) => {
        if (value.Transcript !== undefined)
            return visitor.Transcript(value.Transcript);
        if (value.Categories !== undefined)
            return visitor.Categories(value.Categories);
        if (value.Issues !== undefined)
            return visitor.Issues(value.Issues);
        if (value.Event !== undefined)
            return visitor.Event(value.Event);
        if (value.Attachments !== undefined)
            return visitor.Attachments(value.Attachments);
        if (value.PostContactSummary !== undefined)
            return visitor.PostContactSummary(value.PostContactSummary);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RealtimeContactAnalysisSegment || (RealtimeContactAnalysisSegment = {}));
export const RealTimeContactAnalysisStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
export class OutputTypeNotFoundException extends __BaseException {
    name = "OutputTypeNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "OutputTypeNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OutputTypeNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const ContactRecordingType = {
    AGENT: "AGENT",
    IVR: "IVR",
    SCREEN: "SCREEN",
};
export const SearchContactsMatchType = {
    MATCH_ALL: "MATCH_ALL",
    MATCH_ANY: "MATCH_ANY",
};
export const SortableFieldName = {
    CHANNEL: "CHANNEL",
    CONNECTED_TO_AGENT_TIMESTAMP: "CONNECTED_TO_AGENT_TIMESTAMP",
    DISCONNECT_TIMESTAMP: "DISCONNECT_TIMESTAMP",
    INITIATION_METHOD: "INITIATION_METHOD",
    INITIATION_TIMESTAMP: "INITIATION_TIMESTAMP",
    SCHEDULED_TIMESTAMP: "SCHEDULED_TIMESTAMP",
};
export const SearchContactsTimeRangeType = {
    CONNECTED_TO_AGENT_TIMESTAMP: "CONNECTED_TO_AGENT_TIMESTAMP",
    DISCONNECT_TIMESTAMP: "DISCONNECT_TIMESTAMP",
    INITIATION_TIMESTAMP: "INITIATION_TIMESTAMP",
    SCHEDULED_TIMESTAMP: "SCHEDULED_TIMESTAMP",
};
export const DateComparisonType = {
    EQUAL_TO: "EQUAL_TO",
    GREATER_THAN: "GREATER_THAN",
    GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO",
    LESS_THAN: "LESS_THAN",
    LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO",
};
export const SearchableQueueType = {
    STANDARD: "STANDARD",
};
export class MaximumResultReturnedException extends __BaseException {
    name = "MaximumResultReturnedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "MaximumResultReturnedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MaximumResultReturnedException.prototype);
        this.Message = opts.Message;
    }
}
export const HierarchyGroupMatchType = {
    EXACT: "EXACT",
    WITH_CHILD_GROUPS: "WITH_CHILD_GROUPS",
};
export const NumberComparisonType = {
    EQUAL: "EQUAL",
    GREATER: "GREATER",
    GREATER_OR_EQUAL: "GREATER_OR_EQUAL",
    LESSER: "LESSER",
    LESSER_OR_EQUAL: "LESSER_OR_EQUAL",
    NOT_EQUAL: "NOT_EQUAL",
    RANGE: "RANGE",
};
export const TargetListType = {
    PROFICIENCIES: "PROFICIENCIES",
};
export const ChatEventType = {
    DISCONNECT: "DISCONNECT",
    EVENT: "EVENT",
    MESSAGE: "MESSAGE",
};
export const OutboundMessageSourceType = {
    RAW: "RAW",
    TEMPLATE: "TEMPLATE",
};
export const TrafficType = {
    CAMPAIGN: "CAMPAIGN",
    GENERAL: "GENERAL",
};
export const IvrRecordingTrack = {
    ALL: "ALL",
};
export const VoiceRecordingTrack = {
    ALL: "ALL",
    FROM_AGENT: "FROM_AGENT",
    TO_AGENT: "TO_AGENT",
};
export const InboundMessageSourceType = {
    RAW: "RAW",
};
export const EmailHeaderType = {
    IN_REPLY_TO: "IN_REPLY_TO",
    MESSAGE_ID: "MESSAGE_ID",
    REFERENCES: "REFERENCES",
    X_SES_SPAM_VERDICT: "X_SES_SPAM_VERDICT",
    X_SES_VIRUS_VERDICT: "X_SES_VIRUS_VERDICT",
};
export class DestinationNotAllowedException extends __BaseException {
    name = "DestinationNotAllowedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "DestinationNotAllowedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DestinationNotAllowedException.prototype);
        this.Message = opts.Message;
    }
}
export class OutboundContactNotPermittedException extends __BaseException {
    name = "OutboundContactNotPermittedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "OutboundContactNotPermittedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OutboundContactNotPermittedException.prototype);
        this.Message = opts.Message;
    }
}
export const MeetingFeatureStatus = {
    AVAILABLE: "AVAILABLE",
    UNAVAILABLE: "UNAVAILABLE",
};
export class ContactNotFoundException extends __BaseException {
    name = "ContactNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ContactNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ContactNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ConditionalOperationFailedException extends __BaseException {
    name = "ConditionalOperationFailedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConditionalOperationFailedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConditionalOperationFailedException.prototype);
        this.Message = opts.Message;
    }
}
export const TimerEligibleParticipantRoles = {
    AGENT: "AGENT",
    CUSTOMER: "CUSTOMER",
};
export const ParticipantTimerType = {
    DISCONNECT_NONCUSTOMER: "DISCONNECT_NONCUSTOMER",
    IDLE: "IDLE",
};
export const ParticipantTimerAction = {
    Unset: "Unset",
};
export var ParticipantTimerValue;
(function (ParticipantTimerValue) {
    ParticipantTimerValue.visit = (value, visitor) => {
        if (value.ParticipantTimerAction !== undefined)
            return visitor.ParticipantTimerAction(value.ParticipantTimerAction);
        if (value.ParticipantTimerDurationInMinutes !== undefined)
            return visitor.ParticipantTimerDurationInMinutes(value.ParticipantTimerDurationInMinutes);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ParticipantTimerValue || (ParticipantTimerValue = {}));
export var UpdateParticipantRoleConfigChannelInfo;
(function (UpdateParticipantRoleConfigChannelInfo) {
    UpdateParticipantRoleConfigChannelInfo.visit = (value, visitor) => {
        if (value.Chat !== undefined)
            return visitor.Chat(value.Chat);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(UpdateParticipantRoleConfigChannelInfo || (UpdateParticipantRoleConfigChannelInfo = {}));
export const ViewSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: SENSITIVE_STRING }),
});
export const ListViewsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ViewsSummaryList && {
        ViewsSummaryList: obj.ViewsSummaryList.map((item) => ViewSummaryFilterSensitiveLog(item)),
    }),
});
export const ViewVersionSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: SENSITIVE_STRING }),
});
export const ListViewVersionsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ViewVersionSummaryList && {
        ViewVersionSummaryList: obj.ViewVersionSummaryList.map((item) => ViewVersionSummaryFilterSensitiveLog(item)),
    }),
});
export const ReplicateInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ReplicaAlias && { ReplicaAlias: SENSITIVE_STRING }),
});
export const TranscriptCriteriaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SearchText && { SearchText: SENSITIVE_STRING }),
});
export const TranscriptFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Criteria && { Criteria: obj.Criteria.map((item) => TranscriptCriteriaFilterSensitiveLog(item)) }),
});
export const ContactAnalysisFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Transcript && { Transcript: TranscriptFilterSensitiveLog(obj.Transcript) }),
});
export const SearchableContactAttributesCriteriaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Key && { Key: SENSITIVE_STRING }),
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const SearchableContactAttributesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Criteria && {
        Criteria: obj.Criteria.map((item) => SearchableContactAttributesCriteriaFilterSensitiveLog(item)),
    }),
});
export const SearchableSegmentAttributesCriteriaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Key && { Key: SENSITIVE_STRING }),
    ...(obj.Values && { Values: SENSITIVE_STRING }),
});
export const SearchableSegmentAttributesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Criteria && {
        Criteria: obj.Criteria.map((item) => SearchableSegmentAttributesCriteriaFilterSensitiveLog(item)),
    }),
});
export const SearchCriteriaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ContactAnalysis && { ContactAnalysis: ContactAnalysisFilterSensitiveLog(obj.ContactAnalysis) }),
    ...(obj.SearchableContactAttributes && {
        SearchableContactAttributes: SearchableContactAttributesFilterSensitiveLog(obj.SearchableContactAttributes),
    }),
    ...(obj.SearchableSegmentAttributes && {
        SearchableSegmentAttributes: SearchableSegmentAttributesFilterSensitiveLog(obj.SearchableSegmentAttributes),
    }),
});
export const SearchContactsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SearchCriteria && { SearchCriteria: SearchCriteriaFilterSensitiveLog(obj.SearchCriteria) }),
});
export const EmailAddressMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmailAddress && { EmailAddress: SENSITIVE_STRING }),
    ...(obj.Description && { Description: SENSITIVE_STRING }),
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
});
export const SearchEmailAddressesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmailAddresses && {
        EmailAddresses: obj.EmailAddresses.map((item) => EmailAddressMetadataFilterSensitiveLog(item)),
    }),
});
export const UserIdentityInfoLiteFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FirstName && { FirstName: SENSITIVE_STRING }),
    ...(obj.LastName && { LastName: SENSITIVE_STRING }),
});
export const UserSearchSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IdentityInfo && { IdentityInfo: UserIdentityInfoLiteFilterSensitiveLog(obj.IdentityInfo) }),
});
export const SearchUsersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Users && { Users: obj.Users.map((item) => UserSearchSummaryFilterSensitiveLog(item)) }),
});
export const EmailAddressInfoFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmailAddress && { EmailAddress: SENSITIVE_STRING }),
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
});
export const OutboundAdditionalRecipientsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CcEmailAddresses && {
        CcEmailAddresses: obj.CcEmailAddresses.map((item) => EmailAddressInfoFilterSensitiveLog(item)),
    }),
});
export const OutboundRawMessageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Subject && { Subject: SENSITIVE_STRING }),
    ...(obj.Body && { Body: SENSITIVE_STRING }),
});
export const OutboundEmailContentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RawMessage && { RawMessage: OutboundRawMessageFilterSensitiveLog(obj.RawMessage) }),
});
export const SendOutboundEmailRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FromEmailAddress && { FromEmailAddress: EmailAddressInfoFilterSensitiveLog(obj.FromEmailAddress) }),
    ...(obj.DestinationEmailAddress && {
        DestinationEmailAddress: EmailAddressInfoFilterSensitiveLog(obj.DestinationEmailAddress),
    }),
    ...(obj.AdditionalRecipients && {
        AdditionalRecipients: OutboundAdditionalRecipientsFilterSensitiveLog(obj.AdditionalRecipients),
    }),
    ...(obj.EmailMessage && { EmailMessage: OutboundEmailContentFilterSensitiveLog(obj.EmailMessage) }),
});
export const InboundAdditionalRecipientsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ToAddresses && { ToAddresses: obj.ToAddresses.map((item) => EmailAddressInfoFilterSensitiveLog(item)) }),
    ...(obj.CcAddresses && { CcAddresses: obj.CcAddresses.map((item) => EmailAddressInfoFilterSensitiveLog(item)) }),
});
export const InboundRawMessageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Subject && { Subject: SENSITIVE_STRING }),
    ...(obj.Body && { Body: SENSITIVE_STRING }),
});
export const InboundEmailContentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RawMessage && { RawMessage: InboundRawMessageFilterSensitiveLog(obj.RawMessage) }),
});
export const StartOutboundEmailContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FromEmailAddress && { FromEmailAddress: EmailAddressInfoFilterSensitiveLog(obj.FromEmailAddress) }),
    ...(obj.DestinationEmailAddress && {
        DestinationEmailAddress: EmailAddressInfoFilterSensitiveLog(obj.DestinationEmailAddress),
    }),
    ...(obj.AdditionalRecipients && {
        AdditionalRecipients: OutboundAdditionalRecipientsFilterSensitiveLog(obj.AdditionalRecipients),
    }),
    ...(obj.EmailMessage && { EmailMessage: OutboundEmailContentFilterSensitiveLog(obj.EmailMessage) }),
});
export const StartOutboundVoiceContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: SENSITIVE_STRING }),
    ...(obj.Description && { Description: SENSITIVE_STRING }),
});
export const StartWebRTCContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Description && { Description: SENSITIVE_STRING }),
});
export const AttendeeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.JoinToken && { JoinToken: SENSITIVE_STRING }),
});
export const ConnectionDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Attendee && { Attendee: AttendeeFilterSensitiveLog(obj.Attendee) }),
});
export const StartWebRTCContactResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConnectionData && { ConnectionData: ConnectionDataFilterSensitiveLog(obj.ConnectionData) }),
});
export const UpdateEmailAddressMetadataRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Description && { Description: SENSITIVE_STRING }),
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
});
export const UpdateParticipantAuthenticationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Code && { Code: SENSITIVE_STRING }),
    ...(obj.Error && { Error: SENSITIVE_STRING }),
    ...(obj.ErrorDescription && { ErrorDescription: SENSITIVE_STRING }),
});
