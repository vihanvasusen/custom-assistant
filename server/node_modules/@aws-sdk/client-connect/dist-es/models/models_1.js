import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { ConnectServiceException as __BaseException } from "./ConnectServiceException";
import { UserIdentityInfoFilterSensitiveLog, ViewFilterSensitiveLog, } from "./models_0";
export const AnsweringMachineDetectionStatus = {
    AMD_ERROR: "AMD_ERROR",
    AMD_NOT_APPLICABLE: "AMD_NOT_APPLICABLE",
    AMD_UNANSWERED: "AMD_UNANSWERED",
    AMD_UNRESOLVED: "AMD_UNRESOLVED",
    ANSWERED: "ANSWERED",
    ERROR: "ERROR",
    FAX_MACHINE_DETECTED: "FAX_MACHINE_DETECTED",
    HUMAN_ANSWERED: "HUMAN_ANSWERED",
    SIT_TONE_BUSY: "SIT_TONE_BUSY",
    SIT_TONE_DETECTED: "SIT_TONE_DETECTED",
    SIT_TONE_INVALID_NUMBER: "SIT_TONE_INVALID_NUMBER",
    UNDETECTED: "UNDETECTED",
    VOICEMAIL_BEEP: "VOICEMAIL_BEEP",
    VOICEMAIL_NO_BEEP: "VOICEMAIL_NO_BEEP",
};
export const RoutingCriteriaStepStatus = {
    ACTIVE: "ACTIVE",
    EXPIRED: "EXPIRED",
    INACTIVE: "INACTIVE",
    JOINED: "JOINED",
};
export var EvaluationAnswerData;
(function (EvaluationAnswerData) {
    EvaluationAnswerData.visit = (value, visitor) => {
        if (value.StringValue !== undefined)
            return visitor.StringValue(value.StringValue);
        if (value.NumericValue !== undefined)
            return visitor.NumericValue(value.NumericValue);
        if (value.NotApplicable !== undefined)
            return visitor.NotApplicable(value.NotApplicable);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EvaluationAnswerData || (EvaluationAnswerData = {}));
export const EvaluationStatus = {
    DRAFT: "DRAFT",
    SUBMITTED: "SUBMITTED",
};
export class ContactFlowNotPublishedException extends __BaseException {
    name = "ContactFlowNotPublishedException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ContactFlowNotPublishedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ContactFlowNotPublishedException.prototype);
        this.Message = opts.Message;
    }
}
export const ContactFlowState = {
    ACTIVE: "ACTIVE",
    ARCHIVED: "ARCHIVED",
};
export const ContactFlowModuleState = {
    ACTIVE: "ACTIVE",
    ARCHIVED: "ARCHIVED",
};
export const ContactFlowModuleStatus = {
    PUBLISHED: "PUBLISHED",
    SAVED: "SAVED",
};
export const EvaluationFormVersionStatus = {
    ACTIVE: "ACTIVE",
    DRAFT: "DRAFT",
};
export const InstanceStatus = {
    ACTIVE: "ACTIVE",
    CREATION_FAILED: "CREATION_FAILED",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
};
export const InstanceReplicationStatus = {
    INSTANCE_REPLICATION_COMPLETE: "INSTANCE_REPLICATION_COMPLETE",
    INSTANCE_REPLICATION_DELETION_FAILED: "INSTANCE_REPLICATION_DELETION_FAILED",
    INSTANCE_REPLICATION_FAILED: "INSTANCE_REPLICATION_FAILED",
    INSTANCE_REPLICATION_IN_PROGRESS: "INSTANCE_REPLICATION_IN_PROGRESS",
    INSTANCE_REPLICA_DELETING: "INSTANCE_REPLICA_DELETING",
    RESOURCE_REPLICATION_NOT_STARTED: "RESOURCE_REPLICATION_NOT_STARTED",
};
export const InstanceAttributeType = {
    AUTO_RESOLVE_BEST_VOICES: "AUTO_RESOLVE_BEST_VOICES",
    CONTACTFLOW_LOGS: "CONTACTFLOW_LOGS",
    CONTACT_LENS: "CONTACT_LENS",
    EARLY_MEDIA: "EARLY_MEDIA",
    ENHANCED_CHAT_MONITORING: "ENHANCED_CHAT_MONITORING",
    ENHANCED_CONTACT_MONITORING: "ENHANCED_CONTACT_MONITORING",
    HIGH_VOLUME_OUTBOUND: "HIGH_VOLUME_OUTBOUND",
    INBOUND_CALLS: "INBOUND_CALLS",
    MULTI_PARTY_CHAT_CONFERENCE: "MULTI_PARTY_CHAT_CONFERENCE",
    MULTI_PARTY_CONFERENCE: "MULTI_PARTY_CONFERENCE",
    OUTBOUND_CALLS: "OUTBOUND_CALLS",
    USE_CUSTOM_TTS_VOICES: "USE_CUSTOM_TTS_VOICES",
};
export const PhoneNumberCountryCode = {
    AD: "AD",
    AE: "AE",
    AF: "AF",
    AG: "AG",
    AI: "AI",
    AL: "AL",
    AM: "AM",
    AN: "AN",
    AO: "AO",
    AQ: "AQ",
    AR: "AR",
    AS: "AS",
    AT: "AT",
    AU: "AU",
    AW: "AW",
    AZ: "AZ",
    BA: "BA",
    BB: "BB",
    BD: "BD",
    BE: "BE",
    BF: "BF",
    BG: "BG",
    BH: "BH",
    BI: "BI",
    BJ: "BJ",
    BL: "BL",
    BM: "BM",
    BN: "BN",
    BO: "BO",
    BR: "BR",
    BS: "BS",
    BT: "BT",
    BW: "BW",
    BY: "BY",
    BZ: "BZ",
    CA: "CA",
    CC: "CC",
    CD: "CD",
    CF: "CF",
    CG: "CG",
    CH: "CH",
    CI: "CI",
    CK: "CK",
    CL: "CL",
    CM: "CM",
    CN: "CN",
    CO: "CO",
    CR: "CR",
    CU: "CU",
    CV: "CV",
    CW: "CW",
    CX: "CX",
    CY: "CY",
    CZ: "CZ",
    DE: "DE",
    DJ: "DJ",
    DK: "DK",
    DM: "DM",
    DO: "DO",
    DZ: "DZ",
    EC: "EC",
    EE: "EE",
    EG: "EG",
    EH: "EH",
    ER: "ER",
    ES: "ES",
    ET: "ET",
    FI: "FI",
    FJ: "FJ",
    FK: "FK",
    FM: "FM",
    FO: "FO",
    FR: "FR",
    GA: "GA",
    GB: "GB",
    GD: "GD",
    GE: "GE",
    GG: "GG",
    GH: "GH",
    GI: "GI",
    GL: "GL",
    GM: "GM",
    GN: "GN",
    GQ: "GQ",
    GR: "GR",
    GT: "GT",
    GU: "GU",
    GW: "GW",
    GY: "GY",
    HK: "HK",
    HN: "HN",
    HR: "HR",
    HT: "HT",
    HU: "HU",
    ID: "ID",
    IE: "IE",
    IL: "IL",
    IM: "IM",
    IN: "IN",
    IO: "IO",
    IQ: "IQ",
    IR: "IR",
    IS: "IS",
    IT: "IT",
    JE: "JE",
    JM: "JM",
    JO: "JO",
    JP: "JP",
    KE: "KE",
    KG: "KG",
    KH: "KH",
    KI: "KI",
    KM: "KM",
    KN: "KN",
    KP: "KP",
    KR: "KR",
    KW: "KW",
    KY: "KY",
    KZ: "KZ",
    LA: "LA",
    LB: "LB",
    LC: "LC",
    LI: "LI",
    LK: "LK",
    LR: "LR",
    LS: "LS",
    LT: "LT",
    LU: "LU",
    LV: "LV",
    LY: "LY",
    MA: "MA",
    MC: "MC",
    MD: "MD",
    ME: "ME",
    MF: "MF",
    MG: "MG",
    MH: "MH",
    MK: "MK",
    ML: "ML",
    MM: "MM",
    MN: "MN",
    MO: "MO",
    MP: "MP",
    MR: "MR",
    MS: "MS",
    MT: "MT",
    MU: "MU",
    MV: "MV",
    MW: "MW",
    MX: "MX",
    MY: "MY",
    MZ: "MZ",
    NA: "NA",
    NC: "NC",
    NE: "NE",
    NG: "NG",
    NI: "NI",
    NL: "NL",
    NO: "NO",
    NP: "NP",
    NR: "NR",
    NU: "NU",
    NZ: "NZ",
    OM: "OM",
    PA: "PA",
    PE: "PE",
    PF: "PF",
    PG: "PG",
    PH: "PH",
    PK: "PK",
    PL: "PL",
    PM: "PM",
    PN: "PN",
    PR: "PR",
    PT: "PT",
    PW: "PW",
    PY: "PY",
    QA: "QA",
    RE: "RE",
    RO: "RO",
    RS: "RS",
    RU: "RU",
    RW: "RW",
    SA: "SA",
    SB: "SB",
    SC: "SC",
    SD: "SD",
    SE: "SE",
    SG: "SG",
    SH: "SH",
    SI: "SI",
    SJ: "SJ",
    SK: "SK",
    SL: "SL",
    SM: "SM",
    SN: "SN",
    SO: "SO",
    SR: "SR",
    ST: "ST",
    SV: "SV",
    SX: "SX",
    SY: "SY",
    SZ: "SZ",
    TC: "TC",
    TD: "TD",
    TG: "TG",
    TH: "TH",
    TJ: "TJ",
    TK: "TK",
    TL: "TL",
    TM: "TM",
    TN: "TN",
    TO: "TO",
    TR: "TR",
    TT: "TT",
    TV: "TV",
    TW: "TW",
    TZ: "TZ",
    UA: "UA",
    UG: "UG",
    US: "US",
    UY: "UY",
    UZ: "UZ",
    VA: "VA",
    VC: "VC",
    VE: "VE",
    VG: "VG",
    VI: "VI",
    VN: "VN",
    VU: "VU",
    WF: "WF",
    WS: "WS",
    YE: "YE",
    YT: "YT",
    ZA: "ZA",
    ZM: "ZM",
    ZW: "ZW",
};
export const PhoneNumberWorkflowStatus = {
    Claimed: "CLAIMED",
    Failed: "FAILED",
    InProgress: "IN_PROGRESS",
};
export const PhoneNumberType = {
    DID: "DID",
    SHARED: "SHARED",
    SHORT_CODE: "SHORT_CODE",
    THIRD_PARTY_DID: "THIRD_PARTY_DID",
    THIRD_PARTY_TF: "THIRD_PARTY_TF",
    TOLL_FREE: "TOLL_FREE",
    UIFN: "UIFN",
};
export const QueueStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const TrafficDistributionGroupStatus = {
    ACTIVE: "ACTIVE",
    CREATION_FAILED: "CREATION_FAILED",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
    DELETION_FAILED: "DELETION_FAILED",
    PENDING_DELETION: "PENDING_DELETION",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
};
export const CurrentMetricName = {
    AGENTS_AFTER_CONTACT_WORK: "AGENTS_AFTER_CONTACT_WORK",
    AGENTS_AVAILABLE: "AGENTS_AVAILABLE",
    AGENTS_ERROR: "AGENTS_ERROR",
    AGENTS_NON_PRODUCTIVE: "AGENTS_NON_PRODUCTIVE",
    AGENTS_ONLINE: "AGENTS_ONLINE",
    AGENTS_ON_CALL: "AGENTS_ON_CALL",
    AGENTS_ON_CONTACT: "AGENTS_ON_CONTACT",
    AGENTS_STAFFED: "AGENTS_STAFFED",
    CONTACTS_IN_QUEUE: "CONTACTS_IN_QUEUE",
    CONTACTS_SCHEDULED: "CONTACTS_SCHEDULED",
    OLDEST_CONTACT_AGE: "OLDEST_CONTACT_AGE",
    SLOTS_ACTIVE: "SLOTS_ACTIVE",
    SLOTS_AVAILABLE: "SLOTS_AVAILABLE",
};
export const Unit = {
    COUNT: "COUNT",
    PERCENT: "PERCENT",
    SECONDS: "SECONDS",
};
export const Grouping = {
    CHANNEL: "CHANNEL",
    QUEUE: "QUEUE",
    ROUTING_PROFILE: "ROUTING_PROFILE",
    ROUTING_STEP_EXPRESSION: "ROUTING_STEP_EXPRESSION",
};
export const SortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export class UserNotFoundException extends __BaseException {
    name = "UserNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "UserNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const HistoricalMetricName = {
    ABANDON_TIME: "ABANDON_TIME",
    AFTER_CONTACT_WORK_TIME: "AFTER_CONTACT_WORK_TIME",
    API_CONTACTS_HANDLED: "API_CONTACTS_HANDLED",
    CALLBACK_CONTACTS_HANDLED: "CALLBACK_CONTACTS_HANDLED",
    CONTACTS_ABANDONED: "CONTACTS_ABANDONED",
    CONTACTS_AGENT_HUNG_UP_FIRST: "CONTACTS_AGENT_HUNG_UP_FIRST",
    CONTACTS_CONSULTED: "CONTACTS_CONSULTED",
    CONTACTS_HANDLED: "CONTACTS_HANDLED",
    CONTACTS_HANDLED_INCOMING: "CONTACTS_HANDLED_INCOMING",
    CONTACTS_HANDLED_OUTBOUND: "CONTACTS_HANDLED_OUTBOUND",
    CONTACTS_HOLD_ABANDONS: "CONTACTS_HOLD_ABANDONS",
    CONTACTS_MISSED: "CONTACTS_MISSED",
    CONTACTS_QUEUED: "CONTACTS_QUEUED",
    CONTACTS_TRANSFERRED_IN: "CONTACTS_TRANSFERRED_IN",
    CONTACTS_TRANSFERRED_IN_FROM_QUEUE: "CONTACTS_TRANSFERRED_IN_FROM_QUEUE",
    CONTACTS_TRANSFERRED_OUT: "CONTACTS_TRANSFERRED_OUT",
    CONTACTS_TRANSFERRED_OUT_FROM_QUEUE: "CONTACTS_TRANSFERRED_OUT_FROM_QUEUE",
    HANDLE_TIME: "HANDLE_TIME",
    HOLD_TIME: "HOLD_TIME",
    INTERACTION_AND_HOLD_TIME: "INTERACTION_AND_HOLD_TIME",
    INTERACTION_TIME: "INTERACTION_TIME",
    OCCUPANCY: "OCCUPANCY",
    QUEUED_TIME: "QUEUED_TIME",
    QUEUE_ANSWER_TIME: "QUEUE_ANSWER_TIME",
    SERVICE_LEVEL: "SERVICE_LEVEL",
};
export const Statistic = {
    AVG: "AVG",
    MAX: "MAX",
    SUM: "SUM",
};
export const Comparison = {
    LT: "LT",
};
export const IntervalPeriod = {
    DAY: "DAY",
    FIFTEEN_MIN: "FIFTEEN_MIN",
    HOUR: "HOUR",
    THIRTY_MIN: "THIRTY_MIN",
    TOTAL: "TOTAL",
    WEEK: "WEEK",
};
export const LexVersion = {
    V1: "V1",
    V2: "V2",
};
export var ReferenceSummary;
(function (ReferenceSummary) {
    ReferenceSummary.visit = (value, visitor) => {
        if (value.Url !== undefined)
            return visitor.Url(value.Url);
        if (value.Attachment !== undefined)
            return visitor.Attachment(value.Attachment);
        if (value.EmailMessage !== undefined)
            return visitor.EmailMessage(value.EmailMessage);
        if (value.String !== undefined)
            return visitor.String(value.String);
        if (value.Number !== undefined)
            return visitor.Number(value.Number);
        if (value.Date !== undefined)
            return visitor.Date(value.Date);
        if (value.Email !== undefined)
            return visitor.Email(value.Email);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ReferenceSummary || (ReferenceSummary = {}));
export const DescribeEmailAddressResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmailAddress && { EmailAddress: SENSITIVE_STRING }),
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
    ...(obj.Description && { Description: SENSITIVE_STRING }),
});
export const InstanceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InstanceAlias && { InstanceAlias: SENSITIVE_STRING }),
});
export const DescribeInstanceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Instance && { Instance: InstanceFilterSensitiveLog(obj.Instance) }),
});
export const UserFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IdentityInfo && { IdentityInfo: UserIdentityInfoFilterSensitiveLog(obj.IdentityInfo) }),
});
export const DescribeUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.User && { User: UserFilterSensitiveLog(obj.User) }),
});
export const DescribeViewResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.View && { View: ViewFilterSensitiveLog(obj.View) }),
});
export const CredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: SENSITIVE_STRING }),
    ...(obj.RefreshToken && { RefreshToken: SENSITIVE_STRING }),
});
export const GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Credentials && { Credentials: SENSITIVE_STRING }),
});
export const InstanceSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InstanceAlias && { InstanceAlias: SENSITIVE_STRING }),
});
export const ListInstancesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InstanceSummaryList && {
        InstanceSummaryList: obj.InstanceSummaryList.map((item) => InstanceSummaryFilterSensitiveLog(item)),
    }),
});
