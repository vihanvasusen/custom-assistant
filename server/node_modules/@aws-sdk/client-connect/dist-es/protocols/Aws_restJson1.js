import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, map, parseEpochTimestamp as __parseEpochTimestamp, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ConnectServiceException as __BaseException } from "../models/ConnectServiceException";
import { AccessDeniedException, ConflictException, DuplicateResourceException, IdempotencyException, InternalServiceException, InvalidContactFlowException, InvalidContactFlowModuleException, InvalidParameterException, InvalidRequestException, LimitExceededException, PropertyValidationException, ResourceConflictException, ResourceInUseException, ResourceNotFoundException, ResourceNotReadyException, ServiceQuotaExceededException, ThrottlingException, TooManyRequestsException, } from "../models/models_0";
import { ContactFlowNotPublishedException, EvaluationAnswerData, UserNotFoundException, } from "../models/models_1";
import { ConditionalOperationFailedException, ContactNotFoundException, DestinationNotAllowedException, MaximumResultReturnedException, OutboundContactNotPermittedException, OutputTypeNotFoundException, } from "../models/models_2";
import { EvaluationFormItem, } from "../models/models_3";
export const se_ActivateEvaluationFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}/activate");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    let body;
    body = JSON.stringify(take(input, {
        EvaluationFormVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateAnalyticsDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/analytics-data/instance/{InstanceId}/association");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DataSetId: [],
        TargetAccountId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateApprovedOriginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/approved-origin");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Origin: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateBotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/bot");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        LexBot: (_) => _json(_),
        LexV2Bot: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateDefaultVocabularyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/default-vocabulary/{InstanceId}/{LanguageCode}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("LanguageCode", () => input.LanguageCode, "{LanguageCode}", false);
    let body;
    body = JSON.stringify(take(input, {
        VocabularyId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flow-associations/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        FlowId: [],
        ResourceId: [],
        ResourceType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateInstanceStorageConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/storage-config");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ResourceType: [],
        StorageConfig: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateLambdaFunctionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/lambda-function");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        FunctionArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateLexBotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/lex-bot");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        LexBot: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociatePhoneNumberContactFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/{PhoneNumberId}/contact-flow");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ContactFlowId: [],
        InstanceId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateQueueQuickConnectsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/associate-quick-connects");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify(take(input, {
        QuickConnectIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateRoutingProfileQueuesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/associate-queues");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        QueueConfigs: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateSecurityKeyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/security-key");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Key: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateTrafficDistributionGroupUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}/user");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        UserId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateUserProficienciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/associate-proficiencies");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    body = JSON.stringify(take(input, {
        UserProficiencies: (_) => se_UserProficiencyList(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchAssociateAnalyticsDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/analytics-data/instance/{InstanceId}/associations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DataSetIds: (_) => _json(_),
        TargetAccountId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_BatchDisassociateAnalyticsDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/analytics-data/instance/{InstanceId}/associations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DataSetIds: (_) => _json(_),
        TargetAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchGetAttachedFileMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/attached-files/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_aRA]: [, __expectNonNull(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        FileIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_BatchGetFlowAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flow-associations-batch/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ResourceIds: (_) => _json(_),
        ResourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchPutContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/batch/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactDataRequestList: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ClaimPhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/claim");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        InstanceId: [],
        PhoneNumber: [],
        PhoneNumberDescription: [],
        Tags: (_) => _json(_),
        TargetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CompleteAttachedFileUploadCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attached-files/{InstanceId}/{FileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("FileId", () => input.FileId, "{FileId}", false);
    const query = map({
        [_aRA]: [, __expectNonNull(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateAgentStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agent-status/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        DisplayOrder: [],
        Name: [],
        State: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/create-contact");
    let body;
    body = JSON.stringify(take(input, {
        Attributes: (_) => _json(_),
        Channel: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        ExpiryDurationInMinutes: [],
        InitiateAs: [],
        InitiationMethod: [],
        InstanceId: [],
        Name: [],
        PreviousContactId: [],
        References: (_) => _json(_),
        RelatedContactId: [],
        SegmentAttributes: (_) => se_SegmentAttributes(_, context),
        UserInfo: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateContactFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Content: [],
        Description: [],
        Name: [],
        Status: [],
        Tags: (_) => _json(_),
        Type: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateContactFlowModuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flow-modules/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Content: [],
        Description: [],
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateContactFlowVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/version");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ContactFlowVersion: [],
        Description: [],
        FlowContentSha256: [],
        LastModifiedRegion: [],
        LastModifiedTime: (_) => _.getTime() / 1000,
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateEmailAddressCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/email-addresses/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [],
        Description: [],
        DisplayName: [],
        EmailAddress: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateEvaluationFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-forms/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Items: (_) => se_EvaluationFormItemsList(_, context),
        ScoringStrategy: (_) => _json(_),
        Title: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateHoursOfOperationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/hours-of-operations/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Config: (_) => _json(_),
        Description: [],
        Name: [],
        Tags: (_) => _json(_),
        TimeZone: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateHoursOfOperationOverrideCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}/overrides");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Config: (_) => _json(_),
        Description: [],
        EffectiveFrom: [],
        EffectiveTill: [],
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DirectoryId: [],
        IdentityManagementType: [],
        InboundCallsEnabled: [],
        InstanceAlias: [],
        OutboundCallsEnabled: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateIntegrationAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/integration-associations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        IntegrationArn: [],
        IntegrationType: [],
        SourceApplicationName: [],
        SourceApplicationUrl: [],
        SourceType: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateParticipantCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/create-participant");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactId: [],
        InstanceId: [],
        ParticipantDetails: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePersistentContactAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/persistent-contact-association/{InstanceId}/{InitialContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("InitialContactId", () => input.InitialContactId, "{InitialContactId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [],
        RehydrationType: [],
        SourceContactId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePredefinedAttributeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/predefined-attributes/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
        Values: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreatePromptCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prompts/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        S3Uri: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreatePushNotificationRegistrationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/push-notification/{InstanceId}/registrations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactConfiguration: (_) => _json(_),
        DeviceToken: [],
        DeviceType: [],
        PinpointAppArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        HoursOfOperationId: [],
        MaxContacts: [],
        Name: [],
        OutboundCallerConfig: (_) => _json(_),
        OutboundEmailConfig: (_) => _json(_),
        QuickConnectIds: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateQuickConnectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/quick-connects/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        QuickConnectConfig: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateRoutingProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AgentAvailabilityTimer: [],
        DefaultOutboundQueueId: [],
        Description: [],
        MediaConcurrencies: (_) => _json(_),
        Name: [],
        QueueConfigs: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/rules/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Actions: (_) => se_RuleActions(_, context),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Function: [],
        Name: [],
        PublishStatus: [],
        TriggerEventSource: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSecurityProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/security-profiles/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AllowedAccessControlHierarchyGroupId: [],
        AllowedAccessControlTags: (_) => _json(_),
        Applications: (_) => _json(_),
        Description: [],
        HierarchyRestrictedResources: (_) => _json(_),
        Permissions: (_) => _json(_),
        SecurityProfileName: [],
        TagRestrictedResources: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateTaskTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/task/template");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Constraints: (_) => _json(_),
        ContactFlowId: [],
        Defaults: (_) => _json(_),
        Description: [],
        Fields: (_) => _json(_),
        Name: [],
        SelfAssignFlowId: [],
        Status: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateTrafficDistributionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/traffic-distribution-group");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        InstanceId: [],
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateUseCaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("IntegrationAssociationId", () => input.IntegrationAssociationId, "{IntegrationAssociationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
        UseCaseType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DirectoryUserId: [],
        HierarchyGroupId: [],
        IdentityInfo: (_) => _json(_),
        Password: [],
        PhoneConfig: (_) => _json(_),
        RoutingProfileId: [],
        SecurityProfileIds: (_) => _json(_),
        Tags: (_) => _json(_),
        Username: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateUserHierarchyGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/user-hierarchy-groups/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
        ParentGroupId: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateViewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/views/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [],
        Content: (_) => _json(_),
        Description: [],
        Name: [],
        Status: [],
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateViewVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/views/{InstanceId}/{ViewId}/versions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    body = JSON.stringify(take(input, {
        VersionDescription: [],
        ViewContentSha256: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateVocabularyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/vocabulary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Content: [],
        LanguageCode: [],
        Tags: (_) => _json(_),
        VocabularyName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeactivateEvaluationFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}/deactivate");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    let body;
    body = JSON.stringify(take(input, {
        EvaluationFormVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAttachedFileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attached-files/{InstanceId}/{FileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("FileId", () => input.FileId, "{FileId}", false);
    const query = map({
        [_aRA]: [, __expectNonNull(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteContactEvaluationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-evaluations/{InstanceId}/{EvaluationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationId", () => input.EvaluationId, "{EvaluationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteContactFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteContactFlowModuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowModuleId", () => input.ContactFlowModuleId, "{ContactFlowModuleId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteContactFlowVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/version/{ContactFlowVersion}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    b.p("ContactFlowVersion", () => input.ContactFlowVersion.toString(), "{ContactFlowVersion}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEmailAddressCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/email-addresses/{InstanceId}/{EmailAddressId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EmailAddressId", () => input.EmailAddressId, "{EmailAddressId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEvaluationFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    const query = map({
        [_v]: [() => input.EvaluationFormVersion !== void 0, () => input[_EFV].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteHoursOfOperationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteHoursOfOperationOverrideCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}/overrides/{HoursOfOperationOverrideId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    b.p("HoursOfOperationOverrideId", () => input.HoursOfOperationOverrideId, "{HoursOfOperationOverrideId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_cT]: [, input[_CT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteIntegrationAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("IntegrationAssociationId", () => input.IntegrationAssociationId, "{IntegrationAssociationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePredefinedAttributeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/predefined-attributes/{InstanceId}/{Name}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePromptCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prompts/{InstanceId}/{PromptId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("PromptId", () => input.PromptId, "{PromptId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePushNotificationRegistrationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/push-notification/{InstanceId}/registrations/{RegistrationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RegistrationId", () => input.RegistrationId, "{RegistrationId}", false);
    const query = map({
        [_cI]: [, __expectNonNull(input[_CI], `ContactId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/queues/{InstanceId}/{QueueId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteQuickConnectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/quick-connects/{InstanceId}/{QuickConnectId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QuickConnectId", () => input.QuickConnectId, "{QuickConnectId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRoutingProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/rules/{InstanceId}/{RuleId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RuleId", () => input.RuleId, "{RuleId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSecurityProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/security-profiles/{InstanceId}/{SecurityProfileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTaskTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/task/template/{TaskTemplateId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("TaskTemplateId", () => input.TaskTemplateId, "{TaskTemplateId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTrafficDistributionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteUseCaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases/{UseCaseId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("IntegrationAssociationId", () => input.IntegrationAssociationId, "{IntegrationAssociationId}", false);
    b.p("UseCaseId", () => input.UseCaseId, "{UseCaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/users/{InstanceId}/{UserId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteUserHierarchyGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}");
    b.p("HierarchyGroupId", () => input.HierarchyGroupId, "{HierarchyGroupId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteViewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}/{ViewId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteViewVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}/{ViewId}/versions/{ViewVersion}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    b.p("ViewVersion", () => input.ViewVersion.toString(), "{ViewVersion}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteVocabularyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/vocabulary-remove/{InstanceId}/{VocabularyId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("VocabularyId", () => input.VocabularyId, "{VocabularyId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAgentStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agent-status/{InstanceId}/{AgentStatusId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AgentStatusId", () => input.AgentStatusId, "{AgentStatusId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAuthenticationProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/authentication-profiles/{InstanceId}/{AuthenticationProfileId}");
    b.p("AuthenticationProfileId", () => input.AuthenticationProfileId, "{AuthenticationProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contacts/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeContactEvaluationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-evaluations/{InstanceId}/{EvaluationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationId", () => input.EvaluationId, "{EvaluationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeContactFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeContactFlowModuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowModuleId", () => input.ContactFlowModuleId, "{ContactFlowModuleId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeEmailAddressCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/email-addresses/{InstanceId}/{EmailAddressId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EmailAddressId", () => input.EmailAddressId, "{EmailAddressId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeEvaluationFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    const query = map({
        [_v]: [() => input.EvaluationFormVersion !== void 0, () => input[_EFV].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeHoursOfOperationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeHoursOfOperationOverrideCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}/overrides/{HoursOfOperationOverrideId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    b.p("HoursOfOperationOverrideId", () => input.HoursOfOperationOverrideId, "{HoursOfOperationOverrideId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeInstanceAttributeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/attribute/{AttributeType}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AttributeType", () => input.AttributeType, "{AttributeType}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeInstanceStorageConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/storage-config/{AssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AssociationId", () => input.AssociationId, "{AssociationId}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribePhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-number/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribePredefinedAttributeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/predefined-attributes/{InstanceId}/{Name}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribePromptCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prompts/{InstanceId}/{PromptId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("PromptId", () => input.PromptId, "{PromptId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/queues/{InstanceId}/{QueueId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeQuickConnectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/quick-connects/{InstanceId}/{QuickConnectId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QuickConnectId", () => input.QuickConnectId, "{QuickConnectId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRoutingProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/rules/{InstanceId}/{RuleId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RuleId", () => input.RuleId, "{RuleId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeSecurityProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/security-profiles/{InstanceId}/{SecurityProfileId}");
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeTrafficDistributionGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/users/{InstanceId}/{UserId}");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeUserHierarchyGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}");
    b.p("HierarchyGroupId", () => input.HierarchyGroupId, "{HierarchyGroupId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeUserHierarchyStructureCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/user-hierarchy-structure/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeViewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}/{ViewId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeVocabularyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/vocabulary/{InstanceId}/{VocabularyId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("VocabularyId", () => input.VocabularyId, "{VocabularyId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DisassociateAnalyticsDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/analytics-data/instance/{InstanceId}/association");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DataSetId: [],
        TargetAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateApprovedOriginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/approved-origin");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_o]: [, __expectNonNull(input[_O], `Origin`)],
        [_cT]: [, input[_CT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateBotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/bot");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        LexBot: (_) => _json(_),
        LexV2Bot: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flow-associations/{InstanceId}/{ResourceId}/{ResourceType}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ResourceId", () => input.ResourceId, "{ResourceId}", false);
    b.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateInstanceStorageConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/storage-config/{AssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AssociationId", () => input.AssociationId, "{AssociationId}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
        [_cT]: [, input[_CT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateLambdaFunctionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/lambda-function");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_fA]: [, __expectNonNull(input[_FA], `FunctionArn`)],
        [_cT]: [, input[_CT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateLexBotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/lex-bot");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_bN]: [, __expectNonNull(input[_BN], `BotName`)],
        [_lR]: [, __expectNonNull(input[_LR], `LexRegion`)],
        [_cT]: [, input[_CT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociatePhoneNumberContactFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-number/{PhoneNumberId}/contact-flow");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    const query = map({
        [_iI]: [, __expectNonNull(input[_II], `InstanceId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateQueueQuickConnectsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/disassociate-quick-connects");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify(take(input, {
        QuickConnectIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateRoutingProfileQueuesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/disassociate-queues");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        QueueReferences: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateSecurityKeyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/security-key/{AssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AssociationId", () => input.AssociationId, "{AssociationId}", false);
    const query = map({
        [_cT]: [, input[_CT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateTrafficDistributionGroupUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}/user");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    const query = map({
        [_UI]: [, __expectNonNull(input[_UI], `UserId`)],
        [_II]: [, __expectNonNull(input[_II], `InstanceId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateUserProficienciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/disassociate-proficiencies");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    body = JSON.stringify(take(input, {
        UserProficiencies: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DismissUserContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/contact");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetAttachedFileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attached-files/{InstanceId}/{FileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("FileId", () => input.FileId, "{FileId}", false);
    const query = map({
        [_uEIS]: [() => input.UrlExpiryInSeconds !== void 0, () => input[_UEIS].toString()],
        [_aRA]: [, __expectNonNull(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetContactAttributesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact/attributes/{InstanceId}/{InitialContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("InitialContactId", () => input.InitialContactId, "{InitialContactId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCurrentMetricDataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics/current/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        CurrentMetrics: (_) => _json(_),
        Filters: (_) => _json(_),
        Groupings: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
        SortCriteria: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetCurrentUserDataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics/userdata/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetEffectiveHoursOfOperationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/effective-hours-of-operations/{InstanceId}/{HoursOfOperationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    const query = map({
        [_fD]: [, __expectNonNull(input[_FD], `FromDate`)],
        [_tD]: [, __expectNonNull(input[_TD], `ToDate`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetFederationTokenCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/user/federate/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFlowAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flow-associations/{InstanceId}/{ResourceId}/{ResourceType}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ResourceId", () => input.ResourceId, "{ResourceId}", false);
    b.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMetricDataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics/historical/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        EndTime: (_) => _.getTime() / 1000,
        Filters: (_) => _json(_),
        Groupings: (_) => _json(_),
        HistoricalMetrics: (_) => se_HistoricalMetrics(_, context),
        MaxResults: [],
        NextToken: [],
        StartTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetMetricDataV2Command = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics/data");
    let body;
    body = JSON.stringify(take(input, {
        EndTime: (_) => _.getTime() / 1000,
        Filters: (_) => _json(_),
        Groupings: (_) => _json(_),
        Interval: (_) => _json(_),
        MaxResults: [],
        Metrics: (_) => se_MetricsV2(_, context),
        NextToken: [],
        ResourceArn: [],
        StartTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetPromptFileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prompts/{InstanceId}/{PromptId}/file");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("PromptId", () => input.PromptId, "{PromptId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetTaskTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/task/template/{TaskTemplateId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("TaskTemplateId", () => input.TaskTemplateId, "{TaskTemplateId}", false);
    const query = map({
        [_sV]: [, input[_SV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetTrafficDistributionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/traffic-distribution/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ImportPhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/import");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        InstanceId: [],
        PhoneNumberDescription: [],
        SourcePhoneNumberArn: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAgentStatusesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agent-status/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_AST]: [() => input.AgentStatusTypes !== void 0, () => input[_AST] || []],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAnalyticsDataAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/analytics-data/instance/{InstanceId}/association");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_DSI]: [, input[_DSI]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAnalyticsDataLakeDataSetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/analytics-data/instance/{InstanceId}/datasets");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListApprovedOriginsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/approved-origins");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssociatedContactsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact/associated/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_cI]: [, __expectNonNull(input[_CI], `ContactId`)],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAuthenticationProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/authentication-profiles-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBotsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/bots");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_lV]: [, __expectNonNull(input[_LV], `LexVersion`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListContactEvaluationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-evaluations/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_cI]: [, __expectNonNull(input[_CI], `ContactId`)],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListContactFlowModulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-flow-modules-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_s]: [, input[_CFMS]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListContactFlowsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-flows-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_cFT]: [() => input.ContactFlowTypes !== void 0, () => input[_CFT] || []],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListContactFlowVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/versions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListContactReferencesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact/references/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    const query = map({
        [_rTe]: [__expectNonNull(input.ReferenceTypes, `ReferenceTypes`) != null, () => input[_RTe] || []],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDefaultVocabulariesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/default-vocabulary-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LanguageCode: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListEvaluationFormsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/evaluation-forms/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEvaluationFormVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}/versions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFlowAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/flow-associations-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_RT]: [, input[_RT]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListHoursOfOperationOverridesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}/overrides");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListHoursOfOperationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/hours-of-operations-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInstanceAttributesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/attributes");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInstancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInstanceStorageConfigsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/storage-configs");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIntegrationAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/integration-associations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_iT]: [, input[_IT]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_iA]: [, input[_IA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLambdaFunctionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/lambda-functions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLexBotsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/lex-bots");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPhoneNumbersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-numbers-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_pNT]: [() => input.PhoneNumberTypes !== void 0, () => input[_PNT] || []],
        [_pNCC]: [() => input.PhoneNumberCountryCodes !== void 0, () => input[_PNCC] || []],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPhoneNumbersV2Command = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/list");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        PhoneNumberCountryCodes: (_) => _json(_),
        PhoneNumberPrefix: [],
        PhoneNumberTypes: (_) => _json(_),
        TargetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPredefinedAttributesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/predefined-attributes/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPromptsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/prompts-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListQueueQuickConnectsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/queues/{InstanceId}/{QueueId}/quick-connects");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListQueuesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/queues-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_qT]: [() => input.QueueTypes !== void 0, () => input[_QT] || []],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListQuickConnectsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/quick-connects/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_QCT]: [() => input.QuickConnectTypes !== void 0, () => input[_QCT] || []],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRealtimeContactAnalysisSegmentsV2Command = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/list-real-time-analysis-segments-v2/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
        OutputType: [],
        SegmentTypes: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListRoutingProfileQueuesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/queues");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRoutingProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/routing-profiles-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/rules/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_pS]: [, input[_PS]],
        [_eSN]: [, input[_ESN]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSecurityKeysCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/security-keys");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSecurityProfileApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/security-profiles-applications/{InstanceId}/{SecurityProfileId}");
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSecurityProfilePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/security-profiles-permissions/{InstanceId}/{SecurityProfileId}");
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSecurityProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/security-profiles-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTaskTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/task/template");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_st]: [, input[_S]],
        [_n]: [, input[_N]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTrafficDistributionGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/traffic-distribution-groups");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_iI]: [, input[_II]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTrafficDistributionGroupUsersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}/user");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUseCasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("IntegrationAssociationId", () => input.IntegrationAssociationId, "{IntegrationAssociationId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUserHierarchyGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/user-hierarchy-groups-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUserProficienciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/users/{InstanceId}/{UserId}/proficiencies");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListUsersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/users-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListViewsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_t]: [, input[_T]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListViewVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}/{ViewId}/versions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_MonitorContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/monitor");
    let body;
    body = JSON.stringify(take(input, {
        AllowedMonitorCapabilities: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactId: [],
        InstanceId: [],
        UserId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PauseContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/pause");
    let body;
    body = JSON.stringify(take(input, {
        ContactFlowId: [],
        ContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutUserStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/status");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AgentStatusId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ReleasePhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/phone-number/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    const query = map({
        [_cT]: [, input[_CT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_ReplicateInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/replicate");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ReplicaAlias: [],
        ReplicaRegion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ResumeContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/resume");
    let body;
    body = JSON.stringify(take(input, {
        ContactFlowId: [],
        ContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ResumeContactRecordingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/resume-recording");
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
        ContactRecordingType: [],
        InitialContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchAgentStatusesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-agent-statuses");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_AgentStatusSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchAvailablePhoneNumbersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/search-available");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        PhoneNumberCountryCode: [],
        PhoneNumberPrefix: [],
        PhoneNumberType: [],
        TargetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchContactFlowModulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-contact-flow-modules");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_ContactFlowModuleSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchContactFlowsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-contact-flows");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_ContactFlowSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchContactsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-contacts");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => _json(_),
        Sort: (_) => _json(_),
        TimeRange: (_) => se_SearchContactsTimeRange(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchEmailAddressesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-email-addresses");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_EmailAddressSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchHoursOfOperationOverridesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-hours-of-operation-overrides");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_HoursOfOperationOverrideSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchHoursOfOperationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-hours-of-operations");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_HoursOfOperationSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchPredefinedAttributesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-predefined-attributes");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_PredefinedAttributeSearchCriteria(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchPromptsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-prompts");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_PromptSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchQueuesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-queues");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_QueueSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchQuickConnectsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-quick-connects");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_QuickConnectSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchResourceTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-resource-tags");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        ResourceTypes: (_) => _json(_),
        SearchCriteria: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchRoutingProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-routing-profiles");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_RoutingProfileSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchSecurityProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-security-profiles");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_SecurityProfileSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchUserHierarchyGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-user-hierarchy-groups");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_UserHierarchyGroupSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchUsersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-users");
    let body;
    body = JSON.stringify(take(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_UserSearchCriteria(_, context),
        SearchFilter: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchVocabulariesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/vocabulary-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LanguageCode: [],
        MaxResults: [],
        NameStartsWith: [],
        NextToken: [],
        State: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SendChatIntegrationEventCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/chat-integration-event");
    let body;
    body = JSON.stringify(take(input, {
        DestinationId: [],
        Event: (_) => _json(_),
        NewSessionDetails: (_) => _json(_),
        SourceId: [],
        Subtype: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SendOutboundEmailCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/outbound-email");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AdditionalRecipients: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DestinationEmailAddress: (_) => _json(_),
        EmailMessage: (_) => _json(_),
        FromEmailAddress: (_) => _json(_),
        SourceCampaign: (_) => _json(_),
        TrafficType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartAttachedFileUploadCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/attached-files/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_aRA]: [, __expectNonNull(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CreatedBy: (_) => _json(_),
        FileName: [],
        FileSizeInBytes: [],
        FileUseCaseType: [],
        Tags: (_) => _json(_),
        UrlExpiryInSeconds: [],
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_StartChatContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/chat");
    let body;
    body = JSON.stringify(take(input, {
        Attributes: (_) => _json(_),
        ChatDurationInMinutes: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactFlowId: [],
        CustomerId: [],
        InitialMessage: (_) => _json(_),
        InstanceId: [],
        ParticipantDetails: (_) => _json(_),
        PersistentChat: (_) => _json(_),
        RelatedContactId: [],
        SegmentAttributes: (_) => se_SegmentAttributes(_, context),
        SupportedMessagingContentTypes: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartContactEvaluationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-evaluations/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactId: [],
        EvaluationFormId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartContactRecordingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/start-recording");
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
        InitialContactId: [],
        InstanceId: [],
        VoiceRecordingConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartContactStreamingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/start-streaming");
    let body;
    body = JSON.stringify(take(input, {
        ChatStreamingConfiguration: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartEmailContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/email");
    let body;
    body = JSON.stringify(take(input, {
        AdditionalRecipients: (_) => _json(_),
        Attachments: (_) => _json(_),
        Attributes: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactFlowId: [],
        Description: [],
        DestinationEmailAddress: [],
        EmailMessage: (_) => _json(_),
        FromEmailAddress: (_) => _json(_),
        InstanceId: [],
        Name: [],
        References: (_) => _json(_),
        RelatedContactId: [],
        SegmentAttributes: (_) => se_SegmentAttributes(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartOutboundChatContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/outbound-chat");
    let body;
    body = JSON.stringify(take(input, {
        Attributes: (_) => _json(_),
        ChatDurationInMinutes: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactFlowId: [],
        DestinationEndpoint: (_) => _json(_),
        InitialSystemMessage: (_) => _json(_),
        InstanceId: [],
        ParticipantDetails: (_) => _json(_),
        RelatedContactId: [],
        SegmentAttributes: (_) => se_SegmentAttributes(_, context),
        SourceEndpoint: (_) => _json(_),
        SupportedMessagingContentTypes: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartOutboundEmailContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/outbound-email");
    let body;
    body = JSON.stringify(take(input, {
        AdditionalRecipients: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactId: [],
        DestinationEmailAddress: (_) => _json(_),
        EmailMessage: (_) => _json(_),
        FromEmailAddress: (_) => _json(_),
        InstanceId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartOutboundVoiceContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/outbound-voice");
    let body;
    body = JSON.stringify(take(input, {
        AnswerMachineDetectionConfig: (_) => _json(_),
        Attributes: (_) => _json(_),
        CampaignId: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactFlowId: [],
        Description: [],
        DestinationPhoneNumber: [],
        InstanceId: [],
        Name: [],
        QueueId: [],
        References: (_) => _json(_),
        RelatedContactId: [],
        SourcePhoneNumber: [],
        TrafficType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartScreenSharingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/screen-sharing");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactId: [],
        InstanceId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartTaskContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/task");
    let body;
    body = JSON.stringify(take(input, {
        Attributes: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactFlowId: [],
        Description: [],
        InstanceId: [],
        Name: [],
        PreviousContactId: [],
        QuickConnectId: [],
        References: (_) => _json(_),
        RelatedContactId: [],
        ScheduledTime: (_) => _.getTime() / 1000,
        SegmentAttributes: (_) => se_SegmentAttributes(_, context),
        TaskTemplateId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartWebRTCContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/webrtc");
    let body;
    body = JSON.stringify(take(input, {
        AllowedCapabilities: (_) => _json(_),
        Attributes: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactFlowId: [],
        Description: [],
        InstanceId: [],
        ParticipantDetails: (_) => _json(_),
        References: (_) => _json(_),
        RelatedContactId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/stop");
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
        DisconnectReason: (_) => _json(_),
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopContactRecordingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/stop-recording");
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
        ContactRecordingType: [],
        InitialContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopContactStreamingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/stop-streaming");
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
        InstanceId: [],
        StreamingId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SubmitContactEvaluationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-evaluations/{InstanceId}/{EvaluationId}/submit");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationId", () => input.EvaluationId, "{EvaluationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Answers: (_) => se_EvaluationAnswersInputMap(_, context),
        Notes: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SuspendContactRecordingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/suspend-recording");
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
        ContactRecordingType: [],
        InitialContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/tags");
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
        InstanceId: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TransferContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/transfer");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ContactFlowId: [],
        ContactId: [],
        InstanceId: [],
        QueueId: [],
        UserId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact/tags/{InstanceId}/{ContactId}");
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = map({
        [_TK]: [__expectNonNull(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAgentStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agent-status/{InstanceId}/{AgentStatusId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AgentStatusId", () => input.AgentStatusId, "{AgentStatusId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        DisplayOrder: [],
        Name: [],
        ResetOrderNumber: [],
        State: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateAuthenticationProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/authentication-profiles/{InstanceId}/{AuthenticationProfileId}");
    b.p("AuthenticationProfileId", () => input.AuthenticationProfileId, "{AuthenticationProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AllowedIps: (_) => _json(_),
        BlockedIps: (_) => _json(_),
        Description: [],
        Name: [],
        PeriodicSessionDuration: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contacts/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    body = JSON.stringify(take(input, {
        CustomerEndpoint: (_) => _json(_),
        Description: [],
        Name: [],
        QueueInfo: (_) => _json(_),
        References: (_) => _json(_),
        SegmentAttributes: (_) => se_SegmentAttributes(_, context),
        SystemEndpoint: (_) => _json(_),
        UserInfo: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactAttributesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/attributes");
    let body;
    body = JSON.stringify(take(input, {
        Attributes: (_) => _json(_),
        InitialContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactEvaluationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-evaluations/{InstanceId}/{EvaluationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationId", () => input.EvaluationId, "{EvaluationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Answers: (_) => se_EvaluationAnswersInputMap(_, context),
        Notes: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactFlowContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/content");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Content: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactFlowMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/metadata");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ContactFlowState: [],
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactFlowModuleContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}/content");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowModuleId", () => input.ContactFlowModuleId, "{ContactFlowModuleId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Content: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactFlowModuleMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}/metadata");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowModuleId", () => input.ContactFlowModuleId, "{ContactFlowModuleId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        State: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactFlowNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/name");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactRoutingDataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contacts/{InstanceId}/{ContactId}/routing-data");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    body = JSON.stringify(take(input, {
        QueuePriority: [],
        QueueTimeAdjustmentSeconds: [],
        RoutingCriteria: (_) => se_RoutingCriteriaInput(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateContactScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/schedule");
    let body;
    body = JSON.stringify(take(input, {
        ContactId: [],
        InstanceId: [],
        ScheduledTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateEmailAddressMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/email-addresses/{InstanceId}/{EmailAddressId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EmailAddressId", () => input.EmailAddressId, "{EmailAddressId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [],
        Description: [],
        DisplayName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateEvaluationFormCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CreateNewVersion: [],
        Description: [],
        EvaluationFormVersion: [],
        Items: (_) => se_EvaluationFormItemsList(_, context),
        ScoringStrategy: (_) => _json(_),
        Title: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateHoursOfOperationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Config: (_) => _json(_),
        Description: [],
        Name: [],
        TimeZone: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateHoursOfOperationOverrideCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}/overrides/{HoursOfOperationOverrideId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    b.p("HoursOfOperationOverrideId", () => input.HoursOfOperationOverrideId, "{HoursOfOperationOverrideId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Config: (_) => _json(_),
        Description: [],
        EffectiveFrom: [],
        EffectiveTill: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateInstanceAttributeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/attribute/{AttributeType}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AttributeType", () => input.AttributeType, "{AttributeType}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Value: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateInstanceStorageConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/storage-config/{AssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AssociationId", () => input.AssociationId, "{AssociationId}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_RT], `ResourceType`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        StorageConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateParticipantAuthenticationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/update-participant-authentication");
    let body;
    body = JSON.stringify(take(input, {
        Code: [],
        Error: [],
        ErrorDescription: [],
        InstanceId: [],
        State: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateParticipantRoleConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/participant-role-config/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ChannelConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePhoneNumberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        InstanceId: [],
        TargetArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePhoneNumberMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/{PhoneNumberId}/metadata");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        PhoneNumberDescription: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePredefinedAttributeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/predefined-attributes/{InstanceId}/{Name}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        Values: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdatePromptCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prompts/{InstanceId}/{PromptId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("PromptId", () => input.PromptId, "{PromptId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        S3Uri: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQueueHoursOfOperationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/hours-of-operation");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify(take(input, {
        HoursOfOperationId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQueueMaxContactsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/max-contacts");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify(take(input, {
        MaxContacts: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQueueNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/name");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQueueOutboundCallerConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/outbound-caller-config");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify(take(input, {
        OutboundCallerConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQueueOutboundEmailConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/outbound-email-config");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify(take(input, {
        OutboundEmailConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQueueStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/status");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Status: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQuickConnectConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/quick-connects/{InstanceId}/{QuickConnectId}/config");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QuickConnectId", () => input.QuickConnectId, "{QuickConnectId}", false);
    let body;
    body = JSON.stringify(take(input, {
        QuickConnectConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQuickConnectNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/quick-connects/{InstanceId}/{QuickConnectId}/name");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QuickConnectId", () => input.QuickConnectId, "{QuickConnectId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRoutingProfileAgentAvailabilityTimerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/agent-availability-timer");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AgentAvailabilityTimer: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRoutingProfileConcurrencyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/concurrency");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        MediaConcurrencies: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRoutingProfileDefaultOutboundQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/default-outbound-queue");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DefaultOutboundQueueId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRoutingProfileNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/name");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRoutingProfileQueuesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/queues");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        QueueConfigs: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/rules/{InstanceId}/{RuleId}");
    b.p("RuleId", () => input.RuleId, "{RuleId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Actions: (_) => se_RuleActions(_, context),
        Function: [],
        Name: [],
        PublishStatus: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSecurityProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/security-profiles/{InstanceId}/{SecurityProfileId}");
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AllowedAccessControlHierarchyGroupId: [],
        AllowedAccessControlTags: (_) => _json(_),
        Applications: (_) => _json(_),
        Description: [],
        HierarchyRestrictedResources: (_) => _json(_),
        Permissions: (_) => _json(_),
        TagRestrictedResources: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateTaskTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/task/template/{TaskTemplateId}");
    b.p("TaskTemplateId", () => input.TaskTemplateId, "{TaskTemplateId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Constraints: (_) => _json(_),
        ContactFlowId: [],
        Defaults: (_) => _json(_),
        Description: [],
        Fields: (_) => _json(_),
        Name: [],
        SelfAssignFlowId: [],
        Status: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateTrafficDistributionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/traffic-distribution/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify(take(input, {
        AgentConfig: (_) => _json(_),
        SignInConfig: (_) => _json(_),
        TelephonyConfig: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserHierarchyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/hierarchy");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        HierarchyGroupId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserHierarchyGroupNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}/name");
    b.p("HierarchyGroupId", () => input.HierarchyGroupId, "{HierarchyGroupId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserHierarchyStructureCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/user-hierarchy-structure/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        HierarchyStructure: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserIdentityInfoCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/identity-info");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        IdentityInfo: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserPhoneConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/phone-config");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        PhoneConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserProficienciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/proficiencies");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    body = JSON.stringify(take(input, {
        UserProficiencies: (_) => se_UserProficiencyList(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserRoutingProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/routing-profile");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        RoutingProfileId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserSecurityProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/security-profiles");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        SecurityProfileIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateViewContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/views/{InstanceId}/{ViewId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Content: (_) => _json(_),
        Status: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateViewMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/views/{InstanceId}/{ViewId}/metadata");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_ActivateEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationFormArn: __expectString,
        EvaluationFormId: __expectString,
        EvaluationFormVersion: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateAnalyticsDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSetId: __expectString,
        ResourceShareArn: __expectString,
        ResourceShareId: __expectString,
        TargetAccountId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateApprovedOriginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateDefaultVocabularyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateInstanceStorageConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateLambdaFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateLexBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociatePhoneNumberContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateQueueQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateRoutingProfileQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateSecurityKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateTrafficDistributionGroupUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateUserProficienciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_BatchAssociateAnalyticsDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Created: _json,
        Errors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDisassociateAnalyticsDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Deleted: _json,
        Errors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchGetAttachedFileMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Errors: _json,
        Files: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchGetFlowAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FlowAssociationSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchPutContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FailedRequestList: _json,
        SuccessfulRequestList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ClaimPhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberArn: __expectString,
        PhoneNumberId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CompleteAttachedFileUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateAgentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AgentStatusARN: __expectString,
        AgentStatusId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactArn: __expectString,
        ContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactFlowArn: __expectString,
        ContactFlowId: __expectString,
        FlowContentSha256: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateContactFlowModuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateContactFlowVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactFlowArn: __expectString,
        Version: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEmailAddressCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EmailAddressArn: __expectString,
        EmailAddressId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationFormArn: __expectString,
        EvaluationFormId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HoursOfOperationArn: __expectString,
        HoursOfOperationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateHoursOfOperationOverrideCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HoursOfOperationOverrideId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateIntegrationAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IntegrationAssociationArn: __expectString,
        IntegrationAssociationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateParticipantCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ParticipantCredentials: _json,
        ParticipantId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePersistentContactAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContinuedFromContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePredefinedAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreatePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PromptARN: __expectString,
        PromptId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePushNotificationRegistrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RegistrationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        QueueArn: __expectString,
        QueueId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateQuickConnectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        QuickConnectARN: __expectString,
        QuickConnectId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRoutingProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RoutingProfileArn: __expectString,
        RoutingProfileId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RuleArn: __expectString,
        RuleId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSecurityProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SecurityProfileArn: __expectString,
        SecurityProfileId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTaskTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTrafficDistributionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateUseCaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UseCaseArn: __expectString,
        UseCaseId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        UserArn: __expectString,
        UserId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateUserHierarchyGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HierarchyGroupArn: __expectString,
        HierarchyGroupId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateViewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        View: (_) => de_View(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateViewVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        View: (_) => de_View(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateVocabularyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        State: __expectString,
        VocabularyArn: __expectString,
        VocabularyId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeactivateEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationFormArn: __expectString,
        EvaluationFormId: __expectString,
        EvaluationFormVersion: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAttachedFileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteContactFlowModuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteContactFlowVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteEmailAddressCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteHoursOfOperationOverrideCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteIntegrationAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePredefinedAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePushNotificationRegistrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteQuickConnectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRoutingProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSecurityProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteTaskTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteTrafficDistributionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteUseCaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteUserHierarchyGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteViewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteViewVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteVocabularyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        State: __expectString,
        VocabularyArn: __expectString,
        VocabularyId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAgentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AgentStatus: (_) => de_AgentStatus(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAuthenticationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AuthenticationProfile: (_) => de_AuthenticationProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Contact: (_) => de_Contact(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Evaluation: (_) => de_Evaluation(_, context),
        EvaluationForm: (_) => de_EvaluationFormContent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactFlow: (_) => de_ContactFlow(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeContactFlowModuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactFlowModule: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeEmailAddressCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreateTimestamp: __expectString,
        Description: __expectString,
        DisplayName: __expectString,
        EmailAddress: __expectString,
        EmailAddressArn: __expectString,
        EmailAddressId: __expectString,
        ModifiedTimestamp: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationForm: (_) => de_EvaluationForm(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HoursOfOperation: (_) => de_HoursOfOperation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeHoursOfOperationOverrideCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HoursOfOperationOverride: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Instance: (_) => de_Instance(_, context),
        ReplicationConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attribute: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeInstanceStorageConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StorageConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ClaimedPhoneNumberSummary: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribePredefinedAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PredefinedAttribute: (_) => de_PredefinedAttribute(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Prompt: (_) => de_Prompt(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Queue: (_) => de_Queue(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeQuickConnectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        QuickConnect: (_) => de_QuickConnect(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRoutingProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RoutingProfile: (_) => de_RoutingProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Rule: (_) => de_Rule(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSecurityProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SecurityProfile: (_) => de_SecurityProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeTrafficDistributionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TrafficDistributionGroup: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        User: (_) => de_User(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeUserHierarchyGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HierarchyGroup: (_) => de_HierarchyGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeUserHierarchyStructureCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HierarchyStructure: (_) => de_HierarchyStructure(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeViewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        View: (_) => de_View(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeVocabularyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Vocabulary: (_) => de_Vocabulary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateAnalyticsDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateApprovedOriginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateInstanceStorageConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateLambdaFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateLexBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociatePhoneNumberContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateQueueQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateRoutingProfileQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateSecurityKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateTrafficDistributionGroupUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateUserProficienciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DismissUserContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAttachedFileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociatedResourceArn: __expectString,
        CreatedBy: (_) => _json(__expectUnion(_)),
        CreationTime: __expectString,
        DownloadUrlMetadata: _json,
        FileArn: __expectString,
        FileId: __expectString,
        FileName: __expectString,
        FileSizeInBytes: __expectLong,
        FileStatus: __expectString,
        FileUseCaseType: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetContactAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attributes: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCurrentMetricDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        DataSnapshotTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MetricResults: (_) => de_CurrentMetricResults(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCurrentUserDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        UserDataList: (_) => de_UserDataList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEffectiveHoursOfOperationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EffectiveHoursOfOperationList: _json,
        TimeZone: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFederationTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Credentials: (_) => de_Credentials(_, context),
        SignInUrl: __expectString,
        UserArn: __expectString,
        UserId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFlowAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FlowId: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMetricDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MetricResults: (_) => de_HistoricalMetricResults(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMetricDataV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MetricResults: (_) => de_MetricResultsV2(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPromptFileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PromptPresignedUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTaskTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Constraints: _json,
        ContactFlowId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Defaults: _json,
        Description: __expectString,
        Fields: _json,
        Id: __expectString,
        InstanceId: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        SelfAssignFlowId: __expectString,
        Status: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTrafficDistributionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AgentConfig: _json,
        Arn: __expectString,
        Id: __expectString,
        SignInConfig: _json,
        TelephonyConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ImportPhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberArn: __expectString,
        PhoneNumberId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAgentStatusesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AgentStatusSummaryList: (_) => de_AgentStatusSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnalyticsDataAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Results: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnalyticsDataLakeDataSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Results: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApprovedOriginsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Origins: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssociatedContactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactSummaryList: (_) => de_AssociatedContactSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAuthenticationProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AuthenticationProfileSummaryList: (_) => de_AuthenticationProfileSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBotsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LexBots: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListContactEvaluationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationSummaryList: (_) => de_EvaluationSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListContactFlowModulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactFlowModulesSummaryList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListContactFlowsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactFlowSummaryList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListContactFlowVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactFlowVersionSummaryList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListContactReferencesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ReferenceSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDefaultVocabulariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DefaultVocabularyList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEvaluationFormsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationFormSummaryList: (_) => de_EvaluationFormSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEvaluationFormVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationFormVersionSummaryList: (_) => de_EvaluationFormVersionSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFlowAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FlowAssociationSummaryList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListHoursOfOperationOverridesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HoursOfOperationOverrideList: _json,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListHoursOfOperationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HoursOfOperationSummaryList: (_) => de_HoursOfOperationSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInstanceAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attributes: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InstanceSummaryList: (_) => de_InstanceSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInstanceStorageConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        StorageConfigs: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIntegrationAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IntegrationAssociationSummaryList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLambdaFunctionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LambdaFunctions: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLexBotsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LexBots: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPhoneNumbersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        PhoneNumberSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPhoneNumbersV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ListPhoneNumbersSummaryList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPredefinedAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        PredefinedAttributeSummaryList: (_) => de_PredefinedAttributeSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPromptsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        PromptSummaryList: (_) => de_PromptSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListQueueQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextToken: __expectString,
        QuickConnectSummaryList: (_) => de_QuickConnectSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        QueueSummaryList: (_) => de_QueueSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        QuickConnectSummaryList: (_) => de_QuickConnectSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRealtimeContactAnalysisSegmentsV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channel: __expectString,
        NextToken: __expectString,
        Segments: (_) => de_RealtimeContactAnalysisSegments(_, context),
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRoutingProfileQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextToken: __expectString,
        RoutingProfileQueueConfigSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRoutingProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RoutingProfileSummaryList: (_) => de_RoutingProfileSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RuleSummaryList: (_) => de_RuleSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSecurityKeysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        SecurityKeys: (_) => de_SecurityKeysList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSecurityProfileApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Applications: _json,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSecurityProfilePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextToken: __expectString,
        Permissions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSecurityProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        SecurityProfileSummaryList: (_) => de_SecurityProfileSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTaskTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        TaskTemplates: (_) => de_TaskTemplateList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTrafficDistributionGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        TrafficDistributionGroupSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTrafficDistributionGroupUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        TrafficDistributionGroupUserSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUseCasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        UseCaseSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUserHierarchyGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        UserHierarchyGroupSummaryList: (_) => de_HierarchyGroupSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUserProficienciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextToken: __expectString,
        UserProficiencyList: (_) => de_UserProficiencyList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        UserSummaryList: (_) => de_UserSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListViewsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ViewsSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListViewVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ViewVersionSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_MonitorContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactArn: __expectString,
        ContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PauseContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutUserStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ReleasePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ReplicateInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ResumeContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ResumeContactRecordingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SearchAgentStatusesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AgentStatuses: (_) => de_AgentStatusList(_, context),
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchAvailablePhoneNumbersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AvailableNumbersList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchContactFlowModulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        ContactFlowModules: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchContactFlowsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        ContactFlows: (_) => de_ContactFlowSearchSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchContactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Contacts: (_) => de_Contacts(_, context),
        NextToken: __expectString,
        TotalCount: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchEmailAddressesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        EmailAddresses: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchHoursOfOperationOverridesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        HoursOfOperationOverrides: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchHoursOfOperationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        HoursOfOperations: (_) => de_HoursOfOperationList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchPredefinedAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        PredefinedAttributes: (_) => de_PredefinedAttributeSearchSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchPromptsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        Prompts: (_) => de_PromptList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        Queues: (_) => de_QueueSearchSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        QuickConnects: (_) => de_QuickConnectSearchSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchResourceTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchRoutingProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        RoutingProfiles: (_) => de_RoutingProfileList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchSecurityProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        SecurityProfiles: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchUserHierarchyGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        UserHierarchyGroups: (_) => de_UserHierarchyGroupList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApproximateTotalCount: __expectLong,
        NextToken: __expectString,
        Users: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchVocabulariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        VocabularySummaryList: (_) => de_VocabularySummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SendChatIntegrationEventCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InitialContactId: __expectString,
        NewChatCreated: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SendOutboundEmailCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartAttachedFileUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreatedBy: (_) => _json(__expectUnion(_)),
        CreationTime: __expectString,
        FileArn: __expectString,
        FileId: __expectString,
        FileStatus: __expectString,
        UploadUrlMetadata: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartChatContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactId: __expectString,
        ContinuedFromContactId: __expectString,
        ParticipantId: __expectString,
        ParticipantToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationArn: __expectString,
        EvaluationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartContactRecordingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartContactStreamingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StreamingId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartEmailContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartOutboundChatContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartOutboundEmailContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartOutboundVoiceContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartScreenSharingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartTaskContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartWebRTCContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectionData: _json,
        ContactId: __expectString,
        ParticipantId: __expectString,
        ParticipantToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopContactRecordingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopContactStreamingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SubmitContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationArn: __expectString,
        EvaluationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SuspendContactRecordingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TransferContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ContactArn: __expectString,
        ContactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UntagContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAgentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAuthenticationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationArn: __expectString,
        EvaluationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateContactFlowContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactFlowMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactFlowModuleContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactFlowModuleMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactFlowNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactRoutingDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContactScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateEmailAddressMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EmailAddressArn: __expectString,
        EmailAddressId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EvaluationFormArn: __expectString,
        EvaluationFormId: __expectString,
        EvaluationFormVersion: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateHoursOfOperationOverrideCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateInstanceStorageConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateParticipantAuthenticationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateParticipantRoleConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PhoneNumberArn: __expectString,
        PhoneNumberId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdatePhoneNumberMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePredefinedAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PromptARN: __expectString,
        PromptId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateQueueHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateQueueMaxContactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateQueueNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateQueueOutboundCallerConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateQueueOutboundEmailConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateQueueStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateQuickConnectConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateQuickConnectNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRoutingProfileAgentAvailabilityTimerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRoutingProfileConcurrencyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRoutingProfileDefaultOutboundQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRoutingProfileNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRoutingProfileQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateSecurityProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateTaskTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Constraints: _json,
        ContactFlowId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Defaults: _json,
        Description: __expectString,
        Fields: _json,
        Id: __expectString,
        InstanceId: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        SelfAssignFlowId: __expectString,
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateTrafficDistributionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateUserHierarchyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateUserHierarchyGroupNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateUserHierarchyStructureCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateUserIdentityInfoCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateUserPhoneConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateUserProficienciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateUserRoutingProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateUserSecurityProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateViewContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        View: (_) => de_View(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateViewMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.connect#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.connect#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.connect#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.connect#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.connect#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.connect#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.connect#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.connect#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.connect#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "IdempotencyException":
        case "com.amazonaws.connect#IdempotencyException":
            throw await de_IdempotencyExceptionRes(parsedOutput, context);
        case "DuplicateResourceException":
        case "com.amazonaws.connect#DuplicateResourceException":
            throw await de_DuplicateResourceExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.connect#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InvalidContactFlowException":
        case "com.amazonaws.connect#InvalidContactFlowException":
            throw await de_InvalidContactFlowExceptionRes(parsedOutput, context);
        case "InvalidContactFlowModuleException":
        case "com.amazonaws.connect#InvalidContactFlowModuleException":
            throw await de_InvalidContactFlowModuleExceptionRes(parsedOutput, context);
        case "PropertyValidationException":
        case "com.amazonaws.connect#PropertyValidationException":
            throw await de_PropertyValidationExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.connect#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.connect#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.connect#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ContactFlowNotPublishedException":
        case "com.amazonaws.connect#ContactFlowNotPublishedException":
            throw await de_ContactFlowNotPublishedExceptionRes(parsedOutput, context);
        case "UserNotFoundException":
        case "com.amazonaws.connect#UserNotFoundException":
            throw await de_UserNotFoundExceptionRes(parsedOutput, context);
        case "OutputTypeNotFoundException":
        case "com.amazonaws.connect#OutputTypeNotFoundException":
            throw await de_OutputTypeNotFoundExceptionRes(parsedOutput, context);
        case "MaximumResultReturnedException":
        case "com.amazonaws.connect#MaximumResultReturnedException":
            throw await de_MaximumResultReturnedExceptionRes(parsedOutput, context);
        case "DestinationNotAllowedException":
        case "com.amazonaws.connect#DestinationNotAllowedException":
            throw await de_DestinationNotAllowedExceptionRes(parsedOutput, context);
        case "OutboundContactNotPermittedException":
        case "com.amazonaws.connect#OutboundContactNotPermittedException":
            throw await de_OutboundContactNotPermittedExceptionRes(parsedOutput, context);
        case "ContactNotFoundException":
        case "com.amazonaws.connect#ContactNotFoundException":
            throw await de_ContactNotFoundExceptionRes(parsedOutput, context);
        case "ConditionalOperationFailedException":
        case "com.amazonaws.connect#ConditionalOperationFailedException":
            throw await de_ConditionalOperationFailedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConditionalOperationFailedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConditionalOperationFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ContactFlowNotPublishedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ContactFlowNotPublishedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ContactNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ContactNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DestinationNotAllowedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DestinationNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DuplicateResourceExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DuplicateResourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_IdempotencyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new IdempotencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidContactFlowExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        problems: _json,
    });
    Object.assign(contents, doc);
    const exception = new InvalidContactFlowException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidContactFlowModuleExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Problems: _json,
    });
    Object.assign(contents, doc);
    const exception = new InvalidContactFlowModuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        Reason: (_) => _json(__expectUnion(_)),
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MaximumResultReturnedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MaximumResultReturnedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_OutboundContactNotPermittedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new OutboundContactNotPermittedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_OutputTypeNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new OutputTypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PropertyValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        PropertyList: _json,
    });
    Object.assign(contents, doc);
    const exception = new PropertyValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotReadyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        Reason: (_) => _json(__expectUnion(_)),
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UserNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UserNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_AgentStatusSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AgentStatusSearchCriteria(entry, context);
    });
};
const se_AgentStatusSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_AgentStatusSearchConditionList(_, context),
        OrConditions: (_) => se_AgentStatusSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_AssignSlaActionDefinition = (input, context) => {
    return take(input, {
        CaseSlaConfiguration: (_) => se_CaseSlaConfiguration(_, context),
        SlaAssignmentType: [],
    });
};
const se_AttributeCondition = (input, context) => {
    return take(input, {
        ComparisonOperator: [],
        MatchCriteria: _json,
        Name: [],
        ProficiencyLevel: __serializeFloat,
        Range: (_) => se_Range(_, context),
        Value: [],
    });
};
const se_CaseSlaConfiguration = (input, context) => {
    return take(input, {
        FieldId: [],
        Name: [],
        TargetFieldValues: (_) => se_SlaFieldValueUnionList(_, context),
        TargetSlaMinutes: [],
        Type: [],
    });
};
const se_ContactFlowModuleSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContactFlowModuleSearchCriteria(entry, context);
    });
};
const se_ContactFlowModuleSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_ContactFlowModuleSearchConditionList(_, context),
        OrConditions: (_) => se_ContactFlowModuleSearchConditionList(_, context),
        StateCondition: [],
        StatusCondition: [],
        StringCondition: _json,
    });
};
const se_ContactFlowSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContactFlowSearchCriteria(entry, context);
    });
};
const se_ContactFlowSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_ContactFlowSearchConditionList(_, context),
        OrConditions: (_) => se_ContactFlowSearchConditionList(_, context),
        StateCondition: [],
        StatusCondition: [],
        StringCondition: _json,
        TypeCondition: [],
    });
};
const se_CreateCaseActionDefinition = (input, context) => {
    return take(input, {
        Fields: (_) => se_FieldValues(_, context),
        TemplateId: [],
    });
};
const se_EmailAddressSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_EmailAddressSearchCriteria(entry, context);
    });
};
const se_EmailAddressSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_EmailAddressSearchConditionList(_, context),
        OrConditions: (_) => se_EmailAddressSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_EvaluationAnswerData = (input, context) => {
    return EvaluationAnswerData.visit(input, {
        NotApplicable: (value) => ({ NotApplicable: value }),
        NumericValue: (value) => ({ NumericValue: __serializeFloat(value) }),
        StringValue: (value) => ({ StringValue: value }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_EvaluationAnswerInput = (input, context) => {
    return take(input, {
        Value: (_) => se_EvaluationAnswerData(_, context),
    });
};
const se_EvaluationAnswersInputMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_EvaluationAnswerInput(value, context);
        return acc;
    }, {});
};
const se_EvaluationFormItem = (input, context) => {
    return EvaluationFormItem.visit(input, {
        Question: (value) => ({ Question: se_EvaluationFormQuestion(value, context) }),
        Section: (value) => ({ Section: se_EvaluationFormSection(value, context) }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_EvaluationFormItemsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_EvaluationFormItem(entry, context);
    });
};
const se_EvaluationFormQuestion = (input, context) => {
    return take(input, {
        Instructions: [],
        NotApplicableEnabled: [],
        QuestionType: [],
        QuestionTypeProperties: _json,
        RefId: [],
        Title: [],
        Weight: __serializeFloat,
    });
};
const se_EvaluationFormSection = (input, context) => {
    return take(input, {
        Instructions: [],
        Items: (_) => se_EvaluationFormItemsList(_, context),
        RefId: [],
        Title: [],
        Weight: __serializeFloat,
    });
};
const se_Expression = (input, context) => {
    return take(input, {
        AndExpression: (_) => se_Expressions(_, context),
        AttributeCondition: (_) => se_AttributeCondition(_, context),
        NotAttributeCondition: (_) => se_AttributeCondition(_, context),
        OrExpression: (_) => se_Expressions(_, context),
    });
};
const se_Expressions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Expression(entry, context);
    });
};
const se_FieldValue = (input, context) => {
    return take(input, {
        Id: [],
        Value: (_) => se_FieldValueUnion(_, context),
    });
};
const se_FieldValues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FieldValue(entry, context);
    });
};
const se_FieldValueUnion = (input, context) => {
    return take(input, {
        BooleanValue: [],
        DoubleValue: __serializeFloat,
        EmptyValue: _json,
        StringValue: [],
    });
};
const se_HistoricalMetric = (input, context) => {
    return take(input, {
        Name: [],
        Statistic: [],
        Threshold: (_) => se_Threshold(_, context),
        Unit: [],
    });
};
const se_HistoricalMetrics = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HistoricalMetric(entry, context);
    });
};
const se_HoursOfOperationOverrideSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HoursOfOperationOverrideSearchCriteria(entry, context);
    });
};
const se_HoursOfOperationOverrideSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_HoursOfOperationOverrideSearchConditionList(_, context),
        DateCondition: _json,
        OrConditions: (_) => se_HoursOfOperationOverrideSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_HoursOfOperationSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HoursOfOperationSearchCriteria(entry, context);
    });
};
const se_HoursOfOperationSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_HoursOfOperationSearchConditionList(_, context),
        OrConditions: (_) => se_HoursOfOperationSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_MetricsV2 = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MetricV2(entry, context);
    });
};
const se_MetricV2 = (input, context) => {
    return take(input, {
        MetricFilters: _json,
        Name: [],
        Threshold: (_) => se_ThresholdCollections(_, context),
    });
};
const se_PredefinedAttributeSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PredefinedAttributeSearchCriteria(entry, context);
    });
};
const se_PredefinedAttributeSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_PredefinedAttributeSearchConditionList(_, context),
        OrConditions: (_) => se_PredefinedAttributeSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_PromptSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PromptSearchCriteria(entry, context);
    });
};
const se_PromptSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_PromptSearchConditionList(_, context),
        OrConditions: (_) => se_PromptSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_QueueSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_QueueSearchCriteria(entry, context);
    });
};
const se_QueueSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_QueueSearchConditionList(_, context),
        OrConditions: (_) => se_QueueSearchConditionList(_, context),
        QueueTypeCondition: [],
        StringCondition: _json,
    });
};
const se_QuickConnectSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_QuickConnectSearchCriteria(entry, context);
    });
};
const se_QuickConnectSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_QuickConnectSearchConditionList(_, context),
        OrConditions: (_) => se_QuickConnectSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_Range = (input, context) => {
    return take(input, {
        MaxProficiencyLevel: __serializeFloat,
        MinProficiencyLevel: __serializeFloat,
    });
};
const se_RoutingCriteriaInput = (input, context) => {
    return take(input, {
        Steps: (_) => se_RoutingCriteriaInputSteps(_, context),
    });
};
const se_RoutingCriteriaInputStep = (input, context) => {
    return take(input, {
        Expiry: _json,
        Expression: (_) => se_Expression(_, context),
    });
};
const se_RoutingCriteriaInputSteps = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RoutingCriteriaInputStep(entry, context);
    });
};
const se_RoutingProfileSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RoutingProfileSearchCriteria(entry, context);
    });
};
const se_RoutingProfileSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_RoutingProfileSearchConditionList(_, context),
        OrConditions: (_) => se_RoutingProfileSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_RuleAction = (input, context) => {
    return take(input, {
        ActionType: [],
        AssignContactCategoryAction: _json,
        AssignSlaAction: (_) => se_AssignSlaActionDefinition(_, context),
        CreateCaseAction: (_) => se_CreateCaseActionDefinition(_, context),
        EndAssociatedTasksAction: _json,
        EventBridgeAction: _json,
        SendNotificationAction: _json,
        SubmitAutoEvaluationAction: _json,
        TaskAction: _json,
        UpdateCaseAction: (_) => se_UpdateCaseActionDefinition(_, context),
    });
};
const se_RuleActions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RuleAction(entry, context);
    });
};
const se_SearchContactsTimeRange = (input, context) => {
    return take(input, {
        EndTime: (_) => _.getTime() / 1000,
        StartTime: (_) => _.getTime() / 1000,
        Type: [],
    });
};
const se_SecurityProfileSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SecurityProfileSearchCriteria(entry, context);
    });
};
const se_SecurityProfileSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_SecurityProfileSearchConditionList(_, context),
        OrConditions: (_) => se_SecurityProfileSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_SegmentAttributes = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_SegmentAttributeValue(value, context);
        return acc;
    }, {});
};
const se_SegmentAttributeValue = (input, context) => {
    return take(input, {
        ValueInteger: [],
        ValueMap: (_) => se_SegmentAttributeValueMap(_, context),
        ValueString: [],
    });
};
const se_SegmentAttributeValueMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_SegmentAttributeValue(value, context);
        return acc;
    }, {});
};
const se_SlaFieldValueUnionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FieldValueUnion(entry, context);
    });
};
const se_Threshold = (input, context) => {
    return take(input, {
        Comparison: [],
        ThresholdValue: __serializeFloat,
    });
};
const se_ThresholdCollections = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ThresholdV2(entry, context);
    });
};
const se_ThresholdV2 = (input, context) => {
    return take(input, {
        Comparison: [],
        ThresholdValue: __serializeFloat,
    });
};
const se_UpdateCaseActionDefinition = (input, context) => {
    return take(input, {
        Fields: (_) => se_FieldValues(_, context),
    });
};
const se_UserHierarchyGroupSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UserHierarchyGroupSearchCriteria(entry, context);
    });
};
const se_UserHierarchyGroupSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_UserHierarchyGroupSearchConditionList(_, context),
        OrConditions: (_) => se_UserHierarchyGroupSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const se_UserProficiency = (input, context) => {
    return take(input, {
        AttributeName: [],
        AttributeValue: [],
        Level: __serializeFloat,
    });
};
const se_UserProficiencyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UserProficiency(entry, context);
    });
};
const se_UserSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UserSearchCriteria(entry, context);
    });
};
const se_UserSearchCriteria = (input, context) => {
    return take(input, {
        AndConditions: (_) => se_UserSearchConditionList(_, context),
        HierarchyGroupCondition: _json,
        ListCondition: _json,
        OrConditions: (_) => se_UserSearchConditionList(_, context),
        StringCondition: _json,
    });
};
const de_AgentContactReference = (output, context) => {
    return take(output, {
        AgentContactState: __expectString,
        Channel: __expectString,
        ConnectedToAgentTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ContactId: __expectString,
        InitiationMethod: __expectString,
        Queue: _json,
        StateStartTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AgentContactReferenceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentContactReference(entry, context);
    });
    return retVal;
};
const de_AgentInfo = (output, context) => {
    return take(output, {
        AgentPauseDurationInSeconds: __expectInt32,
        Capabilities: _json,
        ConnectedToAgentTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeviceInfo: _json,
        HierarchyGroups: _json,
        Id: __expectString,
    });
};
const de_AgentQualityMetrics = (output, context) => {
    return take(output, {
        Audio: (_) => de_AudioQualityMetricsInfo(_, context),
    });
};
const de_AgentStatus = (output, context) => {
    return take(output, {
        AgentStatusARN: __expectString,
        AgentStatusId: __expectString,
        Description: __expectString,
        DisplayOrder: __expectInt32,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        State: __expectString,
        Tags: _json,
        Type: __expectString,
    });
};
const de_AgentStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentStatus(entry, context);
    });
    return retVal;
};
const de_AgentStatusReference = (output, context) => {
    return take(output, {
        StatusArn: __expectString,
        StatusName: __expectString,
        StatusStartTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AgentStatusSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Type: __expectString,
    });
};
const de_AgentStatusSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentStatusSummary(entry, context);
    });
    return retVal;
};
const de_AssignSlaActionDefinition = (output, context) => {
    return take(output, {
        CaseSlaConfiguration: (_) => de_CaseSlaConfiguration(_, context),
        SlaAssignmentType: __expectString,
    });
};
const de_AssociatedContactSummary = (output, context) => {
    return take(output, {
        Channel: __expectString,
        ContactArn: __expectString,
        ContactId: __expectString,
        DisconnectTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InitialContactId: __expectString,
        InitiationMethod: __expectString,
        InitiationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PreviousContactId: __expectString,
        RelatedContactId: __expectString,
    });
};
const de_AssociatedContactSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociatedContactSummary(entry, context);
    });
    return retVal;
};
const de_AttributeCondition = (output, context) => {
    return take(output, {
        ComparisonOperator: __expectString,
        MatchCriteria: _json,
        Name: __expectString,
        ProficiencyLevel: __limitedParseFloat32,
        Range: (_) => de_Range(_, context),
        Value: __expectString,
    });
};
const de_AudioQualityMetricsInfo = (output, context) => {
    return take(output, {
        PotentialQualityIssues: _json,
        QualityScore: __limitedParseFloat32,
    });
};
const de_AuthenticationProfile = (output, context) => {
    return take(output, {
        AllowedIps: _json,
        Arn: __expectString,
        BlockedIps: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Id: __expectString,
        IsDefault: __expectBoolean,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MaxSessionDuration: __expectInt32,
        Name: __expectString,
        PeriodicSessionDuration: __expectInt32,
    });
};
const de_AuthenticationProfileSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        IsDefault: __expectBoolean,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_AuthenticationProfileSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthenticationProfileSummary(entry, context);
    });
    return retVal;
};
const de_CaseSlaConfiguration = (output, context) => {
    return take(output, {
        FieldId: __expectString,
        Name: __expectString,
        TargetFieldValues: (_) => de_SlaFieldValueUnionList(_, context),
        TargetSlaMinutes: __expectLong,
        Type: __expectString,
    });
};
const de_Contact = (output, context) => {
    return take(output, {
        AdditionalEmailRecipients: _json,
        AgentInfo: (_) => de_AgentInfo(_, context),
        AnsweringMachineDetectionStatus: __expectString,
        Arn: __expectString,
        Campaign: _json,
        Channel: __expectString,
        ConnectedToSystemTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ContactAssociationId: __expectString,
        Customer: _json,
        CustomerEndpoint: _json,
        CustomerId: __expectString,
        CustomerVoiceActivity: (_) => de_CustomerVoiceActivity(_, context),
        Description: __expectString,
        DisconnectDetails: _json,
        DisconnectTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        InitialContactId: __expectString,
        InitiationMethod: __expectString,
        InitiationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastPausedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastResumedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdateTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        PreviousContactId: __expectString,
        QualityMetrics: (_) => de_QualityMetrics(_, context),
        QueueInfo: (_) => de_QueueInfo(_, context),
        QueuePriority: __expectLong,
        QueueTimeAdjustmentSeconds: __expectInt32,
        RelatedContactId: __expectString,
        RoutingCriteria: (_) => de_RoutingCriteria(_, context),
        ScheduledTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SegmentAttributes: (_) => de_SegmentAttributes(_, context),
        SystemEndpoint: _json,
        Tags: _json,
        TotalPauseCount: __expectInt32,
        TotalPauseDurationInSeconds: __expectInt32,
        WisdomInfo: _json,
    });
};
const de_ContactFlow = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Content: __expectString,
        Description: __expectString,
        FlowContentSha256: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        State: __expectString,
        Status: __expectString,
        Tags: _json,
        Type: __expectString,
        Version: __expectLong,
        VersionDescription: __expectString,
    });
};
const de_ContactFlowSearchSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContactFlow(entry, context);
    });
    return retVal;
};
const de_Contacts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContactSearchSummary(entry, context);
    });
    return retVal;
};
const de_ContactSearchSummary = (output, context) => {
    return take(output, {
        AgentInfo: (_) => de_ContactSearchSummaryAgentInfo(_, context),
        Arn: __expectString,
        Channel: __expectString,
        DisconnectTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        InitialContactId: __expectString,
        InitiationMethod: __expectString,
        InitiationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PreviousContactId: __expectString,
        QueueInfo: (_) => de_ContactSearchSummaryQueueInfo(_, context),
        ScheduledTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SegmentAttributes: _json,
    });
};
const de_ContactSearchSummaryAgentInfo = (output, context) => {
    return take(output, {
        ConnectedToAgentTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
    });
};
const de_ContactSearchSummaryQueueInfo = (output, context) => {
    return take(output, {
        EnqueueTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
    });
};
const de_CreateCaseActionDefinition = (output, context) => {
    return take(output, {
        Fields: (_) => de_FieldValues(_, context),
        TemplateId: __expectString,
    });
};
const de_Credentials = (output, context) => {
    return take(output, {
        AccessToken: __expectString,
        AccessTokenExpiration: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RefreshToken: __expectString,
        RefreshTokenExpiration: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_CurrentMetricData = (output, context) => {
    return take(output, {
        Metric: _json,
        Value: __limitedParseDouble,
    });
};
const de_CurrentMetricDataCollections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CurrentMetricData(entry, context);
    });
    return retVal;
};
const de_CurrentMetricResult = (output, context) => {
    return take(output, {
        Collections: (_) => de_CurrentMetricDataCollections(_, context),
        Dimensions: _json,
    });
};
const de_CurrentMetricResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CurrentMetricResult(entry, context);
    });
    return retVal;
};
const de_CustomerQualityMetrics = (output, context) => {
    return take(output, {
        Audio: (_) => de_AudioQualityMetricsInfo(_, context),
    });
};
const de_CustomerVoiceActivity = (output, context) => {
    return take(output, {
        GreetingEndTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        GreetingStartTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Evaluation = (output, context) => {
    return take(output, {
        Answers: (_) => de_EvaluationAnswersOutputMap(_, context),
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluationArn: __expectString,
        EvaluationId: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Metadata: (_) => de_EvaluationMetadata(_, context),
        Notes: _json,
        Scores: (_) => de_EvaluationScoresMap(_, context),
        Status: __expectString,
        Tags: _json,
    });
};
const de_EvaluationAnswerData = (output, context) => {
    if (__expectBoolean(output.NotApplicable) !== undefined) {
        return { NotApplicable: __expectBoolean(output.NotApplicable) };
    }
    if (__limitedParseDouble(output.NumericValue) !== undefined) {
        return { NumericValue: __limitedParseDouble(output.NumericValue) };
    }
    if (__expectString(output.StringValue) !== undefined) {
        return { StringValue: __expectString(output.StringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_EvaluationAnswerOutput = (output, context) => {
    return take(output, {
        SystemSuggestedValue: (_) => de_EvaluationAnswerData(__expectUnion(_), context),
        Value: (_) => de_EvaluationAnswerData(__expectUnion(_), context),
    });
};
const de_EvaluationAnswersOutputMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_EvaluationAnswerOutput(value, context);
        return acc;
    }, {});
};
const de_EvaluationForm = (output, context) => {
    return take(output, {
        CreatedBy: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EvaluationFormArn: __expectString,
        EvaluationFormId: __expectString,
        EvaluationFormVersion: __expectInt32,
        Items: (_) => de_EvaluationFormItemsList(_, context),
        LastModifiedBy: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Locked: __expectBoolean,
        ScoringStrategy: _json,
        Status: __expectString,
        Tags: _json,
        Title: __expectString,
    });
};
const de_EvaluationFormContent = (output, context) => {
    return take(output, {
        Description: __expectString,
        EvaluationFormArn: __expectString,
        EvaluationFormId: __expectString,
        EvaluationFormVersion: __expectInt32,
        Items: (_) => de_EvaluationFormItemsList(_, context),
        ScoringStrategy: _json,
        Title: __expectString,
    });
};
const de_EvaluationFormItem = (output, context) => {
    if (output.Question != null) {
        return {
            Question: de_EvaluationFormQuestion(output.Question, context),
        };
    }
    if (output.Section != null) {
        return {
            Section: de_EvaluationFormSection(output.Section, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_EvaluationFormItemsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationFormItem(__expectUnion(entry), context);
    });
    return retVal;
};
const de_EvaluationFormQuestion = (output, context) => {
    return take(output, {
        Instructions: __expectString,
        NotApplicableEnabled: __expectBoolean,
        QuestionType: __expectString,
        QuestionTypeProperties: (_) => _json(__expectUnion(_)),
        RefId: __expectString,
        Title: __expectString,
        Weight: __limitedParseDouble,
    });
};
const de_EvaluationFormSection = (output, context) => {
    return take(output, {
        Instructions: __expectString,
        Items: (_) => de_EvaluationFormItemsList(_, context),
        RefId: __expectString,
        Title: __expectString,
        Weight: __limitedParseDouble,
    });
};
const de_EvaluationFormSummary = (output, context) => {
    return take(output, {
        ActiveVersion: __expectInt32,
        CreatedBy: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluationFormArn: __expectString,
        EvaluationFormId: __expectString,
        LastActivatedBy: __expectString,
        LastActivatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedBy: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestVersion: __expectInt32,
        Title: __expectString,
    });
};
const de_EvaluationFormSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationFormSummary(entry, context);
    });
    return retVal;
};
const de_EvaluationFormVersionSummary = (output, context) => {
    return take(output, {
        CreatedBy: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluationFormArn: __expectString,
        EvaluationFormId: __expectString,
        EvaluationFormVersion: __expectInt32,
        LastModifiedBy: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Locked: __expectBoolean,
        Status: __expectString,
    });
};
const de_EvaluationFormVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationFormVersionSummary(entry, context);
    });
    return retVal;
};
const de_EvaluationMetadata = (output, context) => {
    return take(output, {
        ContactAgentId: __expectString,
        ContactId: __expectString,
        EvaluatorArn: __expectString,
        Score: (_) => de_EvaluationScore(_, context),
    });
};
const de_EvaluationScore = (output, context) => {
    return take(output, {
        AutomaticFail: __expectBoolean,
        NotApplicable: __expectBoolean,
        Percentage: __limitedParseDouble,
    });
};
const de_EvaluationScoresMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_EvaluationScore(value, context);
        return acc;
    }, {});
};
const de_EvaluationSummary = (output, context) => {
    return take(output, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluationArn: __expectString,
        EvaluationFormId: __expectString,
        EvaluationFormTitle: __expectString,
        EvaluationId: __expectString,
        EvaluatorArn: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Score: (_) => de_EvaluationScore(_, context),
        Status: __expectString,
    });
};
const de_EvaluationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationSummary(entry, context);
    });
    return retVal;
};
const de_Expiry = (output, context) => {
    return take(output, {
        DurationInSeconds: __expectInt32,
        ExpiryTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Expression = (output, context) => {
    return take(output, {
        AndExpression: (_) => de_Expressions(_, context),
        AttributeCondition: (_) => de_AttributeCondition(_, context),
        NotAttributeCondition: (_) => de_AttributeCondition(_, context),
        OrExpression: (_) => de_Expressions(_, context),
    });
};
const de_Expressions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Expression(entry, context);
    });
    return retVal;
};
const de_FieldValue = (output, context) => {
    return take(output, {
        Id: __expectString,
        Value: (_) => de_FieldValueUnion(_, context),
    });
};
const de_FieldValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FieldValue(entry, context);
    });
    return retVal;
};
const de_FieldValueUnion = (output, context) => {
    return take(output, {
        BooleanValue: __expectBoolean,
        DoubleValue: __limitedParseDouble,
        EmptyValue: _json,
        StringValue: __expectString,
    });
};
const de_HierarchyGroup = (output, context) => {
    return take(output, {
        Arn: __expectString,
        HierarchyPath: (_) => de_HierarchyPath(_, context),
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LevelId: __expectString,
        Name: __expectString,
        Tags: _json,
    });
};
const de_HierarchyGroupSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_HierarchyGroupSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HierarchyGroupSummary(entry, context);
    });
    return retVal;
};
const de_HierarchyLevel = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_HierarchyPath = (output, context) => {
    return take(output, {
        LevelFive: (_) => de_HierarchyGroupSummary(_, context),
        LevelFour: (_) => de_HierarchyGroupSummary(_, context),
        LevelOne: (_) => de_HierarchyGroupSummary(_, context),
        LevelThree: (_) => de_HierarchyGroupSummary(_, context),
        LevelTwo: (_) => de_HierarchyGroupSummary(_, context),
    });
};
const de_HierarchyStructure = (output, context) => {
    return take(output, {
        LevelFive: (_) => de_HierarchyLevel(_, context),
        LevelFour: (_) => de_HierarchyLevel(_, context),
        LevelOne: (_) => de_HierarchyLevel(_, context),
        LevelThree: (_) => de_HierarchyLevel(_, context),
        LevelTwo: (_) => de_HierarchyLevel(_, context),
    });
};
const de_HistoricalMetric = (output, context) => {
    return take(output, {
        Name: __expectString,
        Statistic: __expectString,
        Threshold: (_) => de_Threshold(_, context),
        Unit: __expectString,
    });
};
const de_HistoricalMetricData = (output, context) => {
    return take(output, {
        Metric: (_) => de_HistoricalMetric(_, context),
        Value: __limitedParseDouble,
    });
};
const de_HistoricalMetricDataCollections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoricalMetricData(entry, context);
    });
    return retVal;
};
const de_HistoricalMetricResult = (output, context) => {
    return take(output, {
        Collections: (_) => de_HistoricalMetricDataCollections(_, context),
        Dimensions: _json,
    });
};
const de_HistoricalMetricResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoricalMetricResult(entry, context);
    });
    return retVal;
};
const de_HoursOfOperation = (output, context) => {
    return take(output, {
        Config: _json,
        Description: __expectString,
        HoursOfOperationArn: __expectString,
        HoursOfOperationId: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Tags: _json,
        TimeZone: __expectString,
    });
};
const de_HoursOfOperationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HoursOfOperation(entry, context);
    });
    return retVal;
};
const de_HoursOfOperationSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_HoursOfOperationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HoursOfOperationSummary(entry, context);
    });
    return retVal;
};
const de_Instance = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        IdentityManagementType: __expectString,
        InboundCallsEnabled: __expectBoolean,
        InstanceAccessUrl: __expectString,
        InstanceAlias: __expectString,
        InstanceStatus: __expectString,
        OutboundCallsEnabled: __expectBoolean,
        ServiceRole: __expectString,
        StatusReason: _json,
        Tags: _json,
    });
};
const de_InstanceSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        IdentityManagementType: __expectString,
        InboundCallsEnabled: __expectBoolean,
        InstanceAccessUrl: __expectString,
        InstanceAlias: __expectString,
        InstanceStatus: __expectString,
        OutboundCallsEnabled: __expectBoolean,
        ServiceRole: __expectString,
    });
};
const de_InstanceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceSummary(entry, context);
    });
    return retVal;
};
const de_MetricDataCollectionsV2 = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDataV2(entry, context);
    });
    return retVal;
};
const de_MetricDataV2 = (output, context) => {
    return take(output, {
        Metric: (_) => de_MetricV2(_, context),
        Value: __limitedParseDouble,
    });
};
const de_MetricInterval = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Interval: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_MetricResultsV2 = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricResultV2(entry, context);
    });
    return retVal;
};
const de_MetricResultV2 = (output, context) => {
    return take(output, {
        Collections: (_) => de_MetricDataCollectionsV2(_, context),
        Dimensions: _json,
        MetricInterval: (_) => de_MetricInterval(_, context),
    });
};
const de_MetricV2 = (output, context) => {
    return take(output, {
        MetricFilters: _json,
        Name: __expectString,
        Threshold: (_) => de_ThresholdCollections(_, context),
    });
};
const de_PredefinedAttribute = (output, context) => {
    return take(output, {
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Values: (_) => _json(__expectUnion(_)),
    });
};
const de_PredefinedAttributeSearchSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PredefinedAttribute(entry, context);
    });
    return retVal;
};
const de_PredefinedAttributeSummary = (output, context) => {
    return take(output, {
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_PredefinedAttributeSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PredefinedAttributeSummary(entry, context);
    });
    return retVal;
};
const de_Prompt = (output, context) => {
    return take(output, {
        Description: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        PromptARN: __expectString,
        PromptId: __expectString,
        Tags: _json,
    });
};
const de_PromptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Prompt(entry, context);
    });
    return retVal;
};
const de_PromptSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_PromptSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PromptSummary(entry, context);
    });
    return retVal;
};
const de_QualityMetrics = (output, context) => {
    return take(output, {
        Agent: (_) => de_AgentQualityMetrics(_, context),
        Customer: (_) => de_CustomerQualityMetrics(_, context),
    });
};
const de_Queue = (output, context) => {
    return take(output, {
        Description: __expectString,
        HoursOfOperationId: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MaxContacts: __expectInt32,
        Name: __expectString,
        OutboundCallerConfig: _json,
        OutboundEmailConfig: _json,
        QueueArn: __expectString,
        QueueId: __expectString,
        Status: __expectString,
        Tags: _json,
    });
};
const de_QueueInfo = (output, context) => {
    return take(output, {
        EnqueueTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
    });
};
const de_QueueSearchSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Queue(entry, context);
    });
    return retVal;
};
const de_QueueSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        QueueType: __expectString,
    });
};
const de_QueueSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QueueSummary(entry, context);
    });
    return retVal;
};
const de_QuickConnect = (output, context) => {
    return take(output, {
        Description: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        QuickConnectARN: __expectString,
        QuickConnectConfig: _json,
        QuickConnectId: __expectString,
        Tags: _json,
    });
};
const de_QuickConnectSearchSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuickConnect(entry, context);
    });
    return retVal;
};
const de_QuickConnectSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        QuickConnectType: __expectString,
    });
};
const de_QuickConnectSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuickConnectSummary(entry, context);
    });
    return retVal;
};
const de_Range = (output, context) => {
    return take(output, {
        MaxProficiencyLevel: __limitedParseFloat32,
        MinProficiencyLevel: __limitedParseFloat32,
    });
};
const de_RealtimeContactAnalysisSegment = (output, context) => {
    if (output.Attachments != null) {
        return {
            Attachments: de_RealTimeContactAnalysisSegmentAttachments(output.Attachments, context),
        };
    }
    if (output.Categories != null) {
        return {
            Categories: _json(output.Categories),
        };
    }
    if (output.Event != null) {
        return {
            Event: de_RealTimeContactAnalysisSegmentEvent(output.Event, context),
        };
    }
    if (output.Issues != null) {
        return {
            Issues: _json(output.Issues),
        };
    }
    if (output.PostContactSummary != null) {
        return {
            PostContactSummary: _json(output.PostContactSummary),
        };
    }
    if (output.Transcript != null) {
        return {
            Transcript: de_RealTimeContactAnalysisSegmentTranscript(output.Transcript, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_RealTimeContactAnalysisSegmentAttachments = (output, context) => {
    return take(output, {
        Attachments: _json,
        DisplayName: __expectString,
        Id: __expectString,
        ParticipantId: __expectString,
        ParticipantRole: __expectString,
        Time: (_) => de_RealTimeContactAnalysisTimeData(__expectUnion(_), context),
    });
};
const de_RealTimeContactAnalysisSegmentEvent = (output, context) => {
    return take(output, {
        DisplayName: __expectString,
        EventType: __expectString,
        Id: __expectString,
        ParticipantId: __expectString,
        ParticipantRole: __expectString,
        Time: (_) => de_RealTimeContactAnalysisTimeData(__expectUnion(_), context),
    });
};
const de_RealtimeContactAnalysisSegments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RealtimeContactAnalysisSegment(__expectUnion(entry), context);
    });
    return retVal;
};
const de_RealTimeContactAnalysisSegmentTranscript = (output, context) => {
    return take(output, {
        Content: __expectString,
        ContentType: __expectString,
        DisplayName: __expectString,
        Id: __expectString,
        ParticipantId: __expectString,
        ParticipantRole: __expectString,
        Redaction: _json,
        Sentiment: __expectString,
        Time: (_) => de_RealTimeContactAnalysisTimeData(__expectUnion(_), context),
    });
};
const de_RealTimeContactAnalysisTimeData = (output, context) => {
    if (output.AbsoluteTime != null) {
        return {
            AbsoluteTime: __expectNonNull(__parseRfc3339DateTimeWithOffset(output.AbsoluteTime)),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_RoutingCriteria = (output, context) => {
    return take(output, {
        ActivationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Index: __expectInt32,
        Steps: (_) => de_Steps(_, context),
    });
};
const de_RoutingProfile = (output, context) => {
    return take(output, {
        AgentAvailabilityTimer: __expectString,
        AssociatedQueueIds: _json,
        DefaultOutboundQueueId: __expectString,
        Description: __expectString,
        InstanceId: __expectString,
        IsDefault: __expectBoolean,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MediaConcurrencies: _json,
        Name: __expectString,
        NumberOfAssociatedQueues: __expectLong,
        NumberOfAssociatedUsers: __expectLong,
        RoutingProfileArn: __expectString,
        RoutingProfileId: __expectString,
        Tags: _json,
    });
};
const de_RoutingProfileList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RoutingProfile(entry, context);
    });
    return retVal;
};
const de_RoutingProfileSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_RoutingProfileSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RoutingProfileSummary(entry, context);
    });
    return retVal;
};
const de_Rule = (output, context) => {
    return take(output, {
        Actions: (_) => de_RuleActions(_, context),
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Function: __expectString,
        LastUpdatedBy: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        PublishStatus: __expectString,
        RuleArn: __expectString,
        RuleId: __expectString,
        Tags: _json,
        TriggerEventSource: _json,
    });
};
const de_RuleAction = (output, context) => {
    return take(output, {
        ActionType: __expectString,
        AssignContactCategoryAction: _json,
        AssignSlaAction: (_) => de_AssignSlaActionDefinition(_, context),
        CreateCaseAction: (_) => de_CreateCaseActionDefinition(_, context),
        EndAssociatedTasksAction: _json,
        EventBridgeAction: _json,
        SendNotificationAction: _json,
        SubmitAutoEvaluationAction: _json,
        TaskAction: _json,
        UpdateCaseAction: (_) => de_UpdateCaseActionDefinition(_, context),
    });
};
const de_RuleActions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleAction(entry, context);
    });
    return retVal;
};
const de_RuleSummary = (output, context) => {
    return take(output, {
        ActionSummaries: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EventSourceName: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        PublishStatus: __expectString,
        RuleArn: __expectString,
        RuleId: __expectString,
    });
};
const de_RuleSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleSummary(entry, context);
    });
    return retVal;
};
const de_SecurityKey = (output, context) => {
    return take(output, {
        AssociationId: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Key: __expectString,
    });
};
const de_SecurityKeysList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityKey(entry, context);
    });
    return retVal;
};
const de_SecurityProfile = (output, context) => {
    return take(output, {
        AllowedAccessControlHierarchyGroupId: __expectString,
        AllowedAccessControlTags: _json,
        Arn: __expectString,
        Description: __expectString,
        HierarchyRestrictedResources: _json,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OrganizationResourceId: __expectString,
        SecurityProfileName: __expectString,
        TagRestrictedResources: _json,
        Tags: _json,
    });
};
const de_SecurityProfileSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_SecurityProfileSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityProfileSummary(entry, context);
    });
    return retVal;
};
const de_SegmentAttributes = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_SegmentAttributeValue(value, context);
        return acc;
    }, {});
};
const de_SegmentAttributeValue = (output, context) => {
    return take(output, {
        ValueInteger: __expectInt32,
        ValueMap: (_) => de_SegmentAttributeValueMap(_, context),
        ValueString: __expectString,
    });
};
const de_SegmentAttributeValueMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_SegmentAttributeValue(value, context);
        return acc;
    }, {});
};
const de_SlaFieldValueUnionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FieldValueUnion(entry, context);
    });
    return retVal;
};
const de_Step = (output, context) => {
    return take(output, {
        Expiry: (_) => de_Expiry(_, context),
        Expression: (_) => de_Expression(_, context),
        Status: __expectString,
    });
};
const de_Steps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Step(entry, context);
    });
    return retVal;
};
const de_TaskTemplateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TaskTemplateMetadata(entry, context);
    });
    return retVal;
};
const de_TaskTemplateMetadata = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Id: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Status: __expectString,
    });
};
const de_Threshold = (output, context) => {
    return take(output, {
        Comparison: __expectString,
        ThresholdValue: __limitedParseDouble,
    });
};
const de_ThresholdCollections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThresholdV2(entry, context);
    });
    return retVal;
};
const de_ThresholdV2 = (output, context) => {
    return take(output, {
        Comparison: __expectString,
        ThresholdValue: __limitedParseDouble,
    });
};
const de_UpdateCaseActionDefinition = (output, context) => {
    return take(output, {
        Fields: (_) => de_FieldValues(_, context),
    });
};
const de_User = (output, context) => {
    return take(output, {
        Arn: __expectString,
        DirectoryUserId: __expectString,
        HierarchyGroupId: __expectString,
        Id: __expectString,
        IdentityInfo: _json,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PhoneConfig: _json,
        RoutingProfileId: __expectString,
        SecurityProfileIds: _json,
        Tags: _json,
        Username: __expectString,
    });
};
const de_UserData = (output, context) => {
    return take(output, {
        ActiveSlotsByChannel: _json,
        AvailableSlotsByChannel: _json,
        Contacts: (_) => de_AgentContactReferenceList(_, context),
        HierarchyPath: _json,
        MaxSlotsByChannel: _json,
        NextStatus: __expectString,
        RoutingProfile: _json,
        Status: (_) => de_AgentStatusReference(_, context),
        User: _json,
    });
};
const de_UserDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserData(entry, context);
    });
    return retVal;
};
const de_UserHierarchyGroupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HierarchyGroup(entry, context);
    });
    return retVal;
};
const de_UserProficiency = (output, context) => {
    return take(output, {
        AttributeName: __expectString,
        AttributeValue: __expectString,
        Level: __limitedParseFloat32,
    });
};
const de_UserProficiencyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserProficiency(entry, context);
    });
    return retVal;
};
const de_UserSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Id: __expectString,
        LastModifiedRegion: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Username: __expectString,
    });
};
const de_UserSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserSummary(entry, context);
    });
    return retVal;
};
const de_View = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Content: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Id: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Status: __expectString,
        Tags: _json,
        Type: __expectString,
        Version: __expectInt32,
        VersionDescription: __expectString,
        ViewContentSha256: __expectString,
    });
};
const de_Vocabulary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Content: __expectString,
        FailureReason: __expectString,
        Id: __expectString,
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        State: __expectString,
        Tags: _json,
    });
};
const de_VocabularySummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        FailureReason: __expectString,
        Id: __expectString,
        LanguageCode: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        State: __expectString,
    });
};
const de_VocabularySummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VocabularySummary(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _ARA = "AssociatedResourceArn";
const _AST = "AgentStatusTypes";
const _BN = "BotName";
const _CFMS = "ContactFlowModuleState";
const _CFT = "ContactFlowTypes";
const _CI = "ContactId";
const _CT = "ClientToken";
const _DSI = "DataSetId";
const _EFV = "EvaluationFormVersion";
const _ESN = "EventSourceName";
const _FA = "FunctionArn";
const _FD = "FromDate";
const _IA = "IntegrationArn";
const _II = "InstanceId";
const _IT = "IntegrationType";
const _LR = "LexRegion";
const _LV = "LexVersion";
const _MR = "MaxResults";
const _N = "Name";
const _NT = "NextToken";
const _O = "Origin";
const _PNCC = "PhoneNumberCountryCodes";
const _PNT = "PhoneNumberTypes";
const _PS = "PublishStatus";
const _QCT = "QuickConnectTypes";
const _QT = "QueueTypes";
const _RT = "ResourceType";
const _RTe = "ReferenceTypes";
const _S = "Status";
const _SV = "SnapshotVersion";
const _T = "Type";
const _TD = "ToDate";
const _TK = "TagKeys";
const _UEIS = "UrlExpiryInSeconds";
const _UI = "UserId";
const _aRA = "associatedResourceArn";
const _bN = "botName";
const _cFT = "contactFlowTypes";
const _cI = "contactId";
const _cT = "clientToken";
const _eSN = "eventSourceName";
const _fA = "functionArn";
const _fD = "fromDate";
const _iA = "integrationArn";
const _iI = "instanceId";
const _iT = "integrationType";
const _lR = "lexRegion";
const _lV = "lexVersion";
const _mR = "maxResults";
const _n = "name";
const _nT = "nextToken";
const _o = "origin";
const _pNCC = "phoneNumberCountryCodes";
const _pNT = "phoneNumberTypes";
const _pS = "publishStatus";
const _qT = "queueTypes";
const _rT = "resourceType";
const _rTe = "referenceTypes";
const _s = "state";
const _sV = "snapshotVersion";
const _st = "status";
const _t = "type";
const _tD = "toDate";
const _tK = "tagKeys";
const _uEIS = "urlExpiryInSeconds";
const _v = "version";
